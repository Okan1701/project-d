{"version":3,"sources":["components/SiteNavbar.tsx","components/MainArea.tsx","database.ts","components/MatchOverview.tsx","components/PopUpComponent.tsx","components/MatchCreateArea.tsx","components/LoadingCard.tsx","components/ErrorCard.tsx","components/LeaderboardArea.tsx","components/MatchesArea.tsx","components/ProfileAreaComponent.tsx","components/App.tsx","components/Routing.tsx","components/RegisterComponent.tsx","serviceWorker.ts","index.tsx"],"names":["SiteNavbar","this","props","showContent","react_default","a","createElement","Nav_default","className","Link","as","to","undefined","player","name","Navbar_default","variant","expand","Brand","src","width","height","alt","Toggle","aria-controls","Collapse","id","renderLinks","renderPlayerLink","Component","MainArea","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","account","_this2","web3","eth","getAccounts","then","accounts","setState","API_URL","createMatchEntry","_x","_createMatchEntry","apply","arguments","_callee","match","response","regenerator_default","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","sent","ok","Error","concat","status","stop","_callee2","_context2","json","abrupt","setMatchAsArchived","_x2","_setMatchAsArchived","_callee3","getResponse","putResponse","_context3","toString","console","log","active","t0","t1","checkIfUserIsRegistered","_x3","_checkIfUserIsRegistered","_callee4","address","_context4","_callee5","_context5","getPlayer","_x5","_getPlayer","_callee6","_context6","earnings","parseInt","updatePlayer","_x6","_updatePlayer","_callee7","_context7","updatePlayerWinLoss","_x7","_x8","_updatePlayerWinLoss","_callee8","hasWon","_context8","wins","losses","updatePlayerEarnings","_x9","_x10","_updatePlayerEarnings","_callee9","earningsFromMatch","_context9","getAllPlayers","_getAllPlayers","_callee10","players","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","_context10","asyncIterator","done","value","return","finish","LoadingState","PopUpComponent","Modal_default","show","onHide","onClose","Header","closeButton","Title","title","Body","message","Footer","Button_default","onClick","abi","require","MatchCreateArea","onCreate","isCreating","closePopup","bind","assertThisInitialized","event","form","target","preventDefault","stopPropagation","wei","web3utils","createMatch","reason","alert","contract","Contract","tx","deploy","data","bytecode","send","from","contractInstance","contract_address","options","start_date","end_date","database","Spinner_default","animation","size","role","aria-hidden","_this3","components_PopUpComponent","Card_default","Form_default","onSubmit","e","Group","Label","Control","type","placeholder","required","InputGroup_default","Prepend","Text","pattern","disabled","createLoadingSpinner","LoadingCard","text","ErrorCard","msg","rouletteContractAbi","SortMode","MatchOverview","loadingState","Loading","errorMessage","totalBetValue","isSendingBet","disableFormSubmit","sendBetResultMsg","getMatchDetails","catch","methods","getPlayers","getTotalBetValue","betValueWei","betValueEther","Loaded","prevProps","prevState","snapshot","componentDidMount","betValue","addPlayer","error","win","index","contractMethod","wonBetValueWei","getPlayerBet","lostBetValueWei","loadingElement","includes","onBetSubmit","ex","onBetSubmitFail","components_LoadingCard","components_ErrorCard","Failed","showMainComponent","length","displayForm","makeMeWinner","MatchesArea","matches","selectedMatch","displayMatchDetails","_getActiveMatches","components_MatchOverview","Row_default","Col_default","md","map","onMatchSelected","ProfileAreaComponent","loaded","loadProfile","earningsTxt","renderEarnings","LeaderboardArea","isLoading","sortTitle","ByWins","populateTable","sortMode","ByLosses","ByEarnings","sort","p","b","Table_default","striped","bordered","hover","ButtonGroup_default","renderTable","Routing","react_router","exact","path","render","components_MainArea","components_MatchesArea","components_MatchCreateArea","components_ProfileAreaComponent","components_LeaderboardArea","RegisterComponent","showInfo","onFormSubmit","inputName","_x4","_registerPlayer","onRegisteredCallback","_this4","renderInfo","renderForm","App","detectProvider","errorMsg","init","onInitFailed","failed","window","ethereum","noProvider","web3Provider","Web3","currentProvider","transactionConfirmationBlocks","awaitProviderAuth","enable","providerAuthFailed","notRegistered","react_router_dom","components_SiteNavbar","components_RegisterComponent","onRegistered","components_Routing","Boolean","location","hostname","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.348307ba.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {Link} from \"react-router-dom\";\nimport {IPlayer} from \"../database\";\n\ninterface IProps {\n    showContent: boolean,\n    player?: IPlayer\n}\n\nclass SiteNavbar extends Component<IProps, any> {\n\n    private renderLinks() {\n        if (this.props.showContent) {\n            return (\n                <Nav className=\"mr-auto\">\n                    <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                    <Nav.Link as={Link} to=\"/matches\">Matches</Nav.Link>\n                    <Nav.Link as={Link} to=\"/create\">Create Match</Nav.Link>\n                    <Nav.Link as={Link} to=\"/leaderboard\">Leaderboard</Nav.Link>\n                </Nav>\n            );\n        }\n    }\n\n    private renderPlayerLink() {\n        if (this.props.showContent && this.props.player !== undefined) {\n            return (\n                <Nav>\n                    <Nav.Link as={Link} to=\"/profile\">{this.props.player.name}</Nav.Link>\n                </Nav>\n            );\n        }\n    }\n\n    public render(): any {\n        return (\n            <Navbar variant=\"dark\" expand=\"lg\">\n                <Navbar.Brand as={Link} to=\"/\"><img\n                    src=\"https://yt3.ggpht.com/a/AGF-l7-BuJETOnFhNI2w3WJF163XAa1e13BtRP6znQ=s900-mo-c-c0xffffffff-rj-k-no\"\n                    width=\"30\" height=\"30\" alt=\"Logo brand\"/> EasyBet</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    {this.renderLinks()}\n                    {this.renderPlayerLink()}\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default SiteNavbar;","import React, {Component} from \"react\";\nimport Web3 from \"web3\"\n\ninterface IState {\n    account: string\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MainArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            account: \"Loading...\"\n        };\n    }\n\n\n    public componentDidMount(): void {\n        this.props.web3.eth.getAccounts().then((accounts: string[]) => {\n            this.setState({account: accounts[0]})\n        });\n    }\n\n\n    public render(): React.ReactNode {\n        return (\n            <div>\n                <h1><img src=\"https://www.pix123.com/racingbase-au//201812/Dec11/20181211121538_205.PNG\" width=\"800\"\n                         height=\"300\" alt=\"Logo brand\"/></h1>\n                <hr/>\n                <p>Welcome to EasyBet. This site is used to participate in betting matches with Ether as\n                    currency.\n                </p>\n                <strong>Current wallet address: </strong>{this.state.account}\n            </div>\n        );\n\n    }\n}\n\nexport default MainArea;","const API_URL = \"http://80.211.116.56:8000/api\";\n\n// Defines a match object\nexport interface IMatch {\n    id?: number\n    title: string,\n    contract_address: string,\n    start_date: string,\n    end_date: string,\n    active: boolean\n}\n\n// Defines a player object\nexport interface IPlayer {\n    [key: number]: any\n    address: string,\n    name: string\n    wins: number,\n    losses: number\n    earnings: number\n}\n\n\n/**\n * Create a new match row in the backend database\n * @param match: the match object of type 'IMatch' that will be sent to db\n */\nexport async function createMatchEntry(match: IMatch): Promise<void> {\n    let response = await fetch(API_URL + \"/matches/create\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status});`);\n    }\n}\n\n/**\n * Get all the matches that exist in the backend database\n * @returns an IMatch[] array containing the match objects\n */\nexport async function getActiveMatches(): Promise<IMatch[]> {\n    let response: Response = await fetch(API_URL + \"/matches/active\");\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status})`);\n    }\n\n    return await response.json();\n}\n\n\n/**\n * Archives a specific match using the ID parameter\n * An archived match still exists in database, but wont be retrieved when calling getActiveMatches\n * @param id: the id of the specific match that we want to delete\n */\nexport async function setMatchAsArchived(id: number): Promise<void> {\n    // Retrieve match first\n    let getResponse = await fetch(API_URL + \"/matches/\" + id.toString());\n    if (!getResponse.ok) {\n        throw Error(`Failed to fetch match with ID ${id}! (${getResponse.status})`)\n    }\n    let match: IMatch = await getResponse.json();\n\n    console.log(match);\n\n    // Set match to inactive and send it back to server\n    match.active = false;\n    let putResponse = await fetch(API_URL + \"/matches/\" + id.toString(), {\n        method: \"PUT\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!putResponse.ok) {\n        console.log(await putResponse.json());\n        throw Error(`Failed to archive match ID ${id}! (${putResponse.status})`)\n    }\n\n}\n\n/**\n * Checks if the user is already registered\n * It is done by attempting to get user info from backend using the address which is the primary key\n * If response is not HTTP 200 then it means the backend could not find any user that matches the address\n * @param address: the ethereum public address that belongs to a account\n * @return boolean: true if account exists, false if not\n */\nexport async function checkIfUserIsRegistered(address: string): Promise<boolean> {\n    let response = await fetch(API_URL + \"/players/\" + address);\n    return response.ok;\n}\n\n/**\n * Creates a new player object using the specified address as primary key\n * @param player: object containing the player info. See IPlayer interface!\n */\nexport async function registerPlayer(player: IPlayer): Promise<void> {\n    let response = await fetch(\n        API_URL + \"/players/create\",\n        {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(player)\n        }\n    );\n\n    if (!response.ok) {\n        throw Error(`Failed to create new player! (${response.status})`)\n    }\n}\n\n/**\n * Fetch a specific player using it's wallet address\n * @param address: the wallet address of the player\n */\nexport async function getPlayer(address: string): Promise<IPlayer> {\n    let response: Response = await fetch(API_URL + \"/players/\" + address);\n\n    if (!response.ok) {\n        throw Error(`Failed to fetch player with address ${address}! (${response.status})`)\n    }\n\n    let player: IPlayer = await response.json();\n    player.earnings = parseInt(player.earnings.toString());\n    return player;\n}\n\n/**\n * Update a player on the backend. It will overwrite the old player data with the new one\n * @param player: object of IPlayer type that represents the player\n */\nexport async function updatePlayer(player: IPlayer): Promise<void> {\n    let response: Response = await fetch(API_URL + \"/players/\" + player.address,\n        {\n            method: \"PUT\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(player)\n        }\n    );\n\n    console.log(\"JSON:\" + JSON.stringify(player));\n\n    if (!response.ok) {\n        console.log(response);\n        console.log(player);\n        throw Error(`Failed to update player with address ${player.address}! (${response.status})`)\n    }\n}\n\n/**\n * Update the win/loss stats of the player.\n * It will first fetch the entire player, update it and then send it back to db.\n * @param address: the string wallet address of the player\n * @param hasWon: boolean representing if it should increment the wins stat or the losses stat\n */\nexport async function updatePlayerWinLoss(address: string, hasWon: boolean): Promise<void> {\n    let player: IPlayer = await getPlayer(address);\n\n    if (hasWon) player.wins++;\n    else player.losses++;\n\n    await updatePlayer(player);\n}\n\n/**\n * Update the players total earnings. It is similar to updatePlayerWinLoss()\n * WARNING: the ether must be in wei format first or else you'll screw everything up\n * If player is meant to lose ether, then pass the earningsFromMatch param as a negative value\n * @param address: the string wallet address of the player\n * @param earningsFromMatch: the amount of ether that the player has won in wei format\n */\nexport async function updatePlayerEarnings(address: string, earningsFromMatch: number): Promise<void> {\n    let player: IPlayer = await getPlayer(address);\n    player.earnings += earningsFromMatch;\n\n    await updatePlayer(player);\n}\n\n/**\n * Fetches all the players from the backend\n * The result will be an IPlayer[] array that contains all the player objects\n * NOTE: The backend sends the earnings property as string instead of number,\n * this is not good so we will manualily convert it to number foreach player obj\n */\nexport async function getAllPlayers(): Promise<IPlayer[]> {\n    let response: Response = await fetch(API_URL + \"/players/\");\n\n    if (!response.ok) {\n        throw Error(`Failed to fetch all players! (${response.status})`)\n    }\n\n    // Since backend sends the earnings as string for some reason,\n    // we will need to convert it to number for all player objects\n    let players: IPlayer[] = await response.json();\n    for await (let player of players) {\n       player.earnings = parseInt(player.earnings.toString());\n    }\n\n    return players;\n}","import React, {Component, FormEvent} from \"react\";\nimport LoadingCard from \"./LoadingCard\";\nimport * as database from \"../database\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport * as web3utils from 'web3-utils';\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Contract from \"web3/eth/contract\";\nimport Web3 from \"web3\"\nimport ErrorCard from \"./ErrorCard\";\n\nconst rouletteContractAbi = require(\"../contracts/RouletteContract\");\n\nenum LoadingState {\n    Loading,\n    Loaded,\n    Failed\n}\n\ninterface IState {\n    loadingState: LoadingState,\n    errorMessage: string\n    totalBetValue: string,\n    players: string[],\n    contract?: Contract,\n    account: string,\n    isSendingBet: boolean,\n    disableFormSubmit: boolean,\n    sendBetResultMsg: string\n}\n\ninterface IProps {\n    web3: Web3,\n    match: database.IMatch\n}\n\nclass MatchOverview extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            loadingState: LoadingState.Loading,\n            errorMessage: \"N/A\",\n            totalBetValue: \"\",\n            players: [],\n            contract: undefined,\n            account: \"\",\n            isSendingBet: false,\n            disableFormSubmit: false,\n            sendBetResultMsg: \"\"\n        };\n    }\n\n    public componentDidMount(): void {\n        console.log(\"Address: \" + this.props.match.contract_address);\n        // noinspection JSIgnoredPromiseFromCall\n        this.getMatchDetails().catch(\n            (reason: string) => {\n                console.log(reason);\n            }\n        );\n\n    }\n\n    /**\n     * Get the match details by retrieving data from the relevant contract instance\n     */\n    private async getMatchDetails(): Promise<void> {\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance: any = new this.props.web3.eth.Contract(rouletteContractAbi.abi, this.props.match.contract_address);\n\n        let players: string[] = await contractInstance.methods.getPlayers().call({from: accounts[0]});\n        let betValueWei: string = await contractInstance.methods.getTotalBetValue().call({from: accounts[0]});\n        let betValueEther: string = await web3utils.fromWei(web3utils.toBN(betValueWei));\n\n        await this.setState({\n            players: players,\n            totalBetValue: `${betValueEther} Ether`,\n            contract: contractInstance,\n            account: accounts[0],\n            loadingState: LoadingState.Loaded\n        });\n\n    }\n\n    public componentDidUpdate(prevProps: IProps, prevState: IState, snapshot: any): void {\n        /**\n         * componentDidMount is apparently not called again when user chooses a new match in MatchesArea.\n         * So we have to manually check each component update and call componentDidMount to load new match details.\n         */\n        if (prevProps.match.id !== this.props.match.id) {\n            this.setState({loadingState: LoadingState.Loading}); // Display loading screen again!\n            this.componentDidMount();\n        }\n    }\n\n    /**\n     * Called when user clicks on the Submit button\n     * This will submit the entered bet amount\n     * @param event: Form submit event containing the form and input\n     */\n    private async onBetSubmit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        const form: EventTarget = event.target;\n\n        // Prevent default behavior\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.state.contract === undefined) return;\n\n        // Prevent user from submitting again\n        this.setState({\n            isSendingBet: true,\n            disableFormSubmit: true\n        });\n\n        // The bet value that was entered in the form\n        const betValue: string = form[0].value;\n        const wei: string = web3utils.toWei(betValue);\n\n        // Get the addPlayer method and send a transaction to it\n        let method = this.state.contract.methods.addPlayer();\n        await method.send({\n            from: this.state.account,\n            value: wei.toString()\n        });\n\n        // Reset form and reload match details\n        this.setState({\n            isSendingBet: false,\n            disableFormSubmit: false\n        });\n        this.componentDidMount();\n\n        alert(\"Bet has been placed!\");\n    }\n\n    /**\n     * This method is called when the onSubmitBet method throws an error\n     * It will log the error to console and update the state in order to display UI feedback\n     * @param error: the error object containing details about the error\n     */\n    private async onBetSubmitFail(error: Error): Promise<void> {\n        console.log(error);\n        this.setState({\n            sendBetResultMsg: `${error.name}: ${error.message}`,\n            disableFormSubmit: true,\n            isSendingBet: false\n        });\n    }\n\n\n    /**\n     * Make the currently logged in user win the match\n     * This will call 'win()' on the smart contract\n     */\n    private async makeMeWinner(): Promise<void> {\n        if (this.state.contract === undefined) return;\n        let method = this.state.contract.methods.win();\n        await method.send({from: this.state.account});\n        await database.setMatchAsArchived(this.props.match.id as number);\n\n        // Update the stats for each player\n        // We need to check the address and make sure we do not accidently make the winner lose his earnings stats\n        for (let index in this.state.players) {\n            if (this.state.players[index] === this.state.account) {\n                let contractMethod = this.state.contract.methods.getTotalBetValue();\n                let wonBetValueWei: number = await contractMethod.call({from: this.state.players[index]});\n\n                await database.updatePlayerWinLoss(this.state.players[index], true);\n                await database.updatePlayerEarnings(this.state.players[index], wonBetValueWei);\n\n            } else {\n                let contractMethod = this.state.contract.methods.getPlayerBet(this.state.players[index]);\n                // We will need to invert lostBetValue to a negative value since player is meant to lose earnings\n                let lostBetValueWei: number = await contractMethod.call({from: this.state.players[index]});\n\n                await database.updatePlayerWinLoss(this.state.players[index], false);\n                await database.updatePlayerEarnings(this.state.players[index], lostBetValueWei * -1);\n\n            }\n        }\n    }\n\n    /**\n     * Display the betting form if we meet the requirements\n     */\n    private displayForm(): null | any {\n        // Don't display anything if we don't have the required info\n        if (this.state.account === null || this.state.players === null) return null;\n\n        // If account address is already in players array, then account cannot bet!\n        if (this.state.players.includes(this.state.account)) {\n            return <div className=\"font-italic\">You are already part of this match!</div>\n        } else {\n            // If we are currently sending a bet, then the button will have a loading spinner\n            let loadingElement;\n            if (this.state.isSendingBet) {\n                loadingElement = <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\"/>\n            }\n\n            return (\n                <Form\n                    onSubmit={(e: FormEvent<HTMLFormElement>) => this.onBetSubmit(e).catch((ex: Error) => this.onBetSubmitFail(ex))}>\n                    <Form.Group>\n                        <Form.Label>You can participate in this match by betting your own ether:</Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control type=\"number\" placeholder=\"Enter bet value here...\" required/>\n                        </InputGroup>\n                        <br/>\n                        <Button type=\"submit\" disabled={this.state.disableFormSubmit}>{loadingElement}Submit\n                            bet!</Button>\n                        <p>{this.state.sendBetResultMsg}</p>\n                    </Form.Group>\n                </Form>\n            );\n        }\n    }\n\n    public render(): any {\n        return (\n            <div>\n                <LoadingCard text=\"Loading match data...\" show={this.state.loadingState === LoadingState.Loading}/>\n                <ErrorCard title={\"Failed loading match data!\"} msg={this.state.errorMessage}\n                           show={this.state.loadingState === LoadingState.Failed}/>\n                {this.showMainComponent()}\n            </div>\n        );\n    }\n\n    private showMainComponent() {\n        if (this.state.loadingState === LoadingState.Loaded) {\n            return (\n                <Card>\n                    <Card.Header>Match details</Card.Header>\n                    <Card.Body>\n                        <p>Here in the match overview, you can see additionel details like the amount of players, the\n                            total\n                            bet value and options for you to place your own bet!</p>\n                        <br/><h3>{this.props.match.title}</h3>\n                        <strong>Amount of players: </strong>{this.state.players.length}<br/>\n                        <strong>Total Bet Amount: </strong>{this.state.totalBetValue}<br/>\n                        <strong>Started on: </strong>{this.props.match.start_date}\n                        <hr/>\n                        {this.displayForm()}\n                        <hr/>\n                        <strong>Debug options:</strong><br/>\n                        <Button onClick={() => this.makeMeWinner()}>Make me winner!</Button>\n                    </Card.Body>\n                </Card>\n            );\n        }\n    }\n}\n\nexport default MatchOverview;","import React, {Component} from \"react\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\ninterface IProps {\n    title : string\n    message: string\n    show: boolean\n    onClose: () => void\n\n}\n\n/**\n * A simple pop up component\n * It will display a simple dialog message\n */\nclass PopUpComponent extends Component<IProps,any> {\n\n    render() {\n        return <div>\n            <Modal show={this.props.show} onHide={this.props.onClose}>\n                <Modal.Header closeButton >\n                    <Modal.Title>{this.props.title}</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>{this.props.message}</Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"primary\" onClick={this.props.onClose}>\n                        Ok\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        </div>\n    }\n}\n\nexport default  PopUpComponent;\n","import React, {Component, FormEvent} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Web3 from \"web3\";\nimport * as web3utils from 'web3-utils';\nimport * as database from \"../database\";\nimport BN from \"bn.js\";\nimport Contract from \"web3/eth/contract\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport PopUpComponent from \"./PopUpComponent\";\n\n\nconst abi: any = require(\"../contracts/RouletteContract\");\n\ninterface IState {\n    onCreate : boolean\n    isCreating: boolean\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MatchCreateArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n\n            onCreate: false,\n            isCreating: false\n        };\n        this.closePopup = this.closePopup.bind(this)\n    }\n\n    /**\n     *   This method is run when user clicks on 'Create' button\n     *   This will handle form input and create a new match\n     *   @param event: The html form event\n     */\n    private onSubmit(event: FormEvent<HTMLFormElement>): void {\n        const form: EventTarget = event.target;\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Make sure the button is disabled and showing loading icon\n        this.setState({isCreating: true});\n\n\n        // Get the ether that the user inputted and convert to wei\n        const wei: BN = web3utils.toWei(form[1].value);\n        const title: string = form[0].value;\n\n        this.createMatch(title, wei).then(\n            () => console.log(\"Match has been created!\"),\n            (reason: string) => {\n                alert(reason);\n                this.setState({isCreating: false});\n            }\n        )\n    }\n\n    /**\n     *  This will use the form input to create a new match\n     *  First it will get the current account that is logged in and from there it will create a new smart contract    \n     *  Details of the contract will also be saved to database\n     *  @param title: The name of the match. Will be saved to db\n     *  @param wei: The amount of ether in 'wei' format\n     */\n    private async createMatch(title: string, wei: BN): Promise<void> {\n\n        // Get the user accounts that are available in MetaMask\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n        // Create the contract object that we will use to deploy and interact with the contract\n        const contract = new this.props.web3.eth.Contract(abi.abi);\n\n        // Deploy a new instance of the contract and send a transaction to it containing the bet value\n        // The new instance will be stored in contractInstance\n        let tx: any = contract.deploy({data: abi.bytecode, arguments: []});\n        let contractInstance: Contract = await tx.send({\n            from: accounts[0], // Account of the sender\n            value: wei.toString() // The bet value in wei\n        });\n\n        // Create a new match entry in the database\n        let match: database.IMatch = {\n            title: title,\n            contract_address: contractInstance.options.address,\n            start_date: \"2019-05-05\",\n            end_date: \"2019-05-05\",\n            active: true\n        };\n        await database.createMatchEntry(match);\n        this.setState({onCreate: true, isCreating:false});\n\n    }\n\n    private createLoadingSpinner() {\n        if (this.state.isCreating) {\n            return (\n                <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                />\n            );\n        }\n        return null;\n    }\n\n    /**\n     * Hides the confirmation popup that is shown when match is created\n     * This is done by setting onCreate of the state to false\n     */\n    public closePopup(): void{\n        this.setState({onCreate:false})\n    }\n\n    public render(): React.ReactNode {\n        return <div>\n\n            <PopUpComponent title=\"Confirmation\" message=\"Your match has been created!\" onClose={this.closePopup} show={this.state.onCreate}/>\n            <h1>Match creation</h1>\n            <hr/>\n            <p>On this page, you can create a new betting match that other players can participate in!\n            </p>\n            <Card>\n                <Card.Body>\n                    <Card.Title>Enter new match details</Card.Title>\n                    <Form onSubmit={(e: FormEvent<HTMLFormElement>) => this.onSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Match Title:</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter match title here...\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Your bet</Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"double\" placeholder=\"Enter bet value here...\" pattern=\"(^-?[0-9.]+)\" required />\n                            </InputGroup>\n                        </Form.Group>\n                        <p>Once you have created the match, other users will be able to see it and even participate\n                            in it with their own ether!</p>\n                        <Button type=\"submit\" disabled={this.state.isCreating}>{this.createLoadingSpinner()} Create</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </div>;\n    }\n}\n\nexport default MatchCreateArea;\n","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\ninterface IProps {\n    text: string,\n    show: boolean\n}\n\nclass LoadingCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" text/>\n                            <br/><br/>\n                            <Card.Title><strong>{this.props.text}</strong></Card.Title>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default LoadingCard;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\ninterface IProps {\n    title: string,\n    msg: string\n    show: boolean\n}\n\nclass ErrorCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Card.Title><strong>{this.props.title}</strong></Card.Title>\n                            <br/><br/>\n                            <strong>{this.props.msg}</strong>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default ErrorCard;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport LoadingCard from \"./LoadingCard\";\nimport * as database from \"../database\";\n\nenum SortMode {\n    ByWins = \"by wins\",\n    ByLosses = \"by losses\",\n    ByEarnings = \"by earnings\"\n}\n\ninterface IState {\n    isLoading: boolean,\n    players: database.IPlayer[],\n    sortTitle: string\n}\n\ninterface IProps {\n}\n\nclass LeaderboardArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            players: [],\n            sortTitle: SortMode.ByWins\n        };\n    }\n\n    public componentDidMount(): void {\n        this.populateTable(SortMode.ByWins).catch((e: Error) => alert(e));\n    }\n\n    /**\n     * Get all the players from backend, sort it depending on the input and then update state\n     * It is called by the onClick event of the 'sort by' buttons at the top of the table\n     * @param sortMode: enum value that controls how the data will be sorted\n     */\n    private async populateTable(sortMode: SortMode): Promise<void> {\n        this.setState({isLoading: true});\n\n        let players: database.IPlayer[] = await database.getAllPlayers();\n\n        // See: https://www.w3schools.com/js/js_array_sort.asp for more info about sorting function\n        switch (sortMode) {\n            case SortMode.ByWins:\n                players.sort(function (p: database.IPlayer, b: database.IPlayer) {\n                    return b.wins - p.wins\n                });\n                break;\n            case SortMode.ByLosses:\n                players.sort(function (p: database.IPlayer, b: database.IPlayer) {\n                    return b.losses - p.losses\n                });\n                break;\n            case SortMode.ByEarnings:\n                players.sort(function (p: database.IPlayer, b: database.IPlayer) {\n                    return b.earnings - p.earnings\n                });\n                break;\n        }\n        this.setState({\n            isLoading: false,\n            players: players,\n            sortTitle: sortMode\n        });\n    }\n\n    /**\n     * Renders the leaderboard table containing the data.\n     * If the component is still loading data, we will display a loadingcard instead\n     */\n    private renderTable() {\n        if (this.state.isLoading) {\n            return <LoadingCard text={\"Loading leaderboard data...\"} show={true}/>;\n        }\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>Username</th>\n                    <th>Wins</th>\n                    <th>Losses</th>\n                    <th>Earnings</th>\n                </tr>\n                </thead>\n                <tbody>\n                {this.state.players.map((player: database.IPlayer) => (\n                    <tr>\n                        <td>{player.name}</td>\n                        <td>{player.wins}</td>\n                        <td>{player.losses}</td>\n                        <td>{player.earnings}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    public render() {\n        return (\n            <div>\n                <h1>Leaderboard</h1>\n                <hr/>\n                <p>On this page, you can access the online leaderboard where you can see the top players per score\n                    type!</p>\n                <Card>\n                    <Card.Header>Leaderboard</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Top players {this.state.sortTitle}</Card.Title>\n                        <div className=\"d-flex flex-column\">\n                            <ButtonGroup>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByWins).catch((e: Error) => alert(e))}>Sort\n                                    by wins</Button>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByLosses).catch((e: Error) => alert(e))}>Sort\n                                    by losses</Button>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByEarnings).catch((e: Error) => alert(e))}>Sort\n                                    by earnings</Button>\n                            </ButtonGroup>\n                        </div>\n                        <br/>\n                        {this.renderTable()}\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default LeaderboardArea;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport * as database from \"../database\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport MatchOverview from \"./MatchOverview\";\nimport Web3 from \"web3\"\n\n// Define properties of the component Props\ninterface IProps {\n    web3: Web3\n}\n\n// Define the properties of the component State\ninterface IState {\n    matches: database.IMatch[],\n    selectedMatch?: database.IMatch,\n    displayMatchDetails: boolean\n}\n\nclass MatchesArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            matches: [],\n            selectedMatch: undefined,\n            displayMatchDetails: false\n        };\n    }\n    \n    public componentDidMount(): void {\n        // Get the matches from database\n        database.getActiveMatches().then(\n            (matches: database.IMatch[]) => {\n                this.setState({\n                    matches: matches,\n                });\n            },\n            (reason: string) => {\n                console.log(\"Failed loading list: \" + reason);\n                this.setState({\n                });\n            }\n        );\n    }\n\n    /**\n     * Called when user clicks on the View button of a match in the list\n     * @param match: the selected match object\n     */\n    private onMatchSelected(match: database.IMatch): void {\n        this.setState({\n            displayMatchDetails: true,\n            selectedMatch: match\n        });\n    }\n\n    /**\n     * Will display the match details if a current match is selected\n     */\n    private displayMatchDetails(): React.ReactNode {\n        if (this.state.displayMatchDetails) {\n            return <MatchOverview match={(this.state.selectedMatch as database.IMatch)} web3={this.props.web3}/>\n        } else {\n            return (\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Match details</Card.Title>\n                        <p>Select a match in order to see more details and options!</p>\n                    </Card.Body>\n                </Card>\n            );\n        }\n    }\n\n\n    public render(): React.ReactNode {\n        return (\n            <div>\n                <Row>\n                    <Col md=\"3\">\n                        <Card>\n                            <Card.Header>Matches</Card.Header>\n                            <Card.Body>\n                                {this.state.matches.map((match) => (\n                                    <div>\n                                        <Card>\n                                            <Card.Body>\n                                                <Card.Title>{match.title}</Card.Title>\n                                                <strong>Started on: </strong>{match.start_date}\n                                                <br/>\n                                                <Button onClick={() => (this.onMatchSelected(match))}>View</Button>\n                                            </Card.Body>\n                                        </Card>\n                                        <br/>\n                                    </div>\n                                ))}\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col md=\"9\">\n                        {this.displayMatchDetails()}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default MatchesArea;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport {getPlayer, IPlayer} from \"../database\";\nimport * as web3utils from 'web3-utils';\nimport Web3 from \"web3\";\n\ninterface IState {\n    player: IPlayer,\n    loaded: boolean\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass ProfileAreaComponent extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            player: {\n                address: \"Loading...\",\n                name: \"Loading...\",\n                wins: 0,\n                losses: 0,\n                earnings: 0\n            },\n            loaded: false\n        };\n    }\n\n    public componentDidMount(): void {\n        this.loadProfile().catch((e: Error) => alert(e));\n    }\n\n    private async loadProfile(): Promise<void> {\n        let accounts: string[] = await this.props.web3.eth.getAccounts();\n        let player: IPlayer = await getPlayer(accounts[0]);\n\n        this.setState({player: player, loaded: true});\n    }\n\n    private renderEarnings() {\n        let earningsTxt = web3utils.fromWei(this.state.player.earnings.toString());\n\n        if (this.state.player.earnings >= 0) {\n            earningsTxt = \"+ \" + earningsTxt;\n            return <p className=\"text-success\">Earnings: {earningsTxt} Ether</p>\n        } else {\n            return <p className=\"text-danger\">Earnings: {earningsTxt} Ether</p>\n        }\n\n    }\n\n    public render() {\n        if (this.state.loaded) {\n            return (\n                <Card>\n                    <Card.Header>Profile</Card.Header>\n                    <Card.Body>\n                        <Card.Title>{this.state.player.name}</Card.Title>\n                        <strong>Statistics:</strong><br/><br/>\n                        <p>Wins: {this.state.player.wins}</p>\n                        <p>Losses: {this.state.player.losses}</p>\n                        {this.renderEarnings()}\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return <strong>Loading...</strong>;\n        }\n    }\n}\n\nexport default ProfileAreaComponent;","import React, {Component, ReactNode} from 'react';\nimport '../css/App.css';\nimport SiteNavbar from \"./SiteNavbar\";\nimport Web3 from \"web3\";\nimport Routing from \"./Routing\";\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\nimport * as database from \"../database\";\nimport RegisterComponent from \"./RegisterComponent\";\n\nenum LoadingState {\n    detectProvider,\n    noProvider,\n    awaitProviderAuth,\n    providerAuthFailed,\n    notRegistered,\n    loaded,\n    failed\n}\n\ninterface IState {\n    loadingState: LoadingState,\n    errorMsg: string\n    web3?: Web3,\n    accounts: string[],\n    player?: database.IPlayer\n}\n\nclass App extends Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            loadingState: LoadingState.detectProvider,\n            errorMsg: \"N/A\",\n            web3: undefined,\n            accounts: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        this.init().catch(this.onInitFailed);\n\n    }\n\n    private onInitFailed(error: Error): void {\n        console.log(error);\n        this.setState({\n            loadingState: LoadingState.failed,\n            errorMsg: error.message\n        });\n\n    }\n\n    private async init(): Promise<void> {\n        let web3Provider: Web3;\n\n        // Check if a provider like MetaMask is active\n        if (window.web3 === undefined && window.ethereum === undefined) {\n            this.setState({loadingState: LoadingState.noProvider});\n            return;\n        } else {\n            web3Provider = new Web3(window.web3.currentProvider);\n            web3Provider.eth.transactionConfirmationBlocks = 1;\n            this.setState({\n                loadingState: LoadingState.awaitProviderAuth,\n                web3: web3Provider\n            });\n        }\n\n        // Get MetaMask Account\n        this.setState({loadingState: LoadingState.awaitProviderAuth});\n        window.ethereum.enable();\n        let accounts: string[] = await web3Provider.eth.getAccounts();\n        if (accounts.length === 0) {\n            this.setState({loadingState: LoadingState.providerAuthFailed});\n            return;\n        }\n\n        // Check if user is registered with us\n        let userIsRegistered: boolean = await database.checkIfUserIsRegistered(accounts[0]);\n        if (!userIsRegistered) {\n            this.setState({\n                loadingState: LoadingState.notRegistered,\n                accounts: accounts\n            });\n            return;\n        }\n\n        const player: database.IPlayer = await database.getPlayer(accounts[0]);\n        this.setState({\n            loadingState: LoadingState.loaded,\n            player: player\n        });\n    }\n\n    private onRegistered(): void {\n        this.setState({loadingState: LoadingState.loaded});\n        database.getPlayer(this.state.accounts[0]).then(\n            (player: database.IPlayer) => this.setState({player: player, loadingState: LoadingState.loaded})\n        );\n    }\n\n    public render(): ReactNode {\n        switch (this.state.loadingState) {\n            case LoadingState.detectProvider:\n                return <strong>Detecting Web3 provider...</strong>;\n            case LoadingState.noProvider:\n                return <strong>No web3 provider found!</strong>;\n            case LoadingState.awaitProviderAuth:\n                return <strong>Awaiting permission from MetaMask</strong>;\n            case LoadingState.providerAuthFailed:\n                return <strong>You are not logged in MetaMask!</strong>;\n            case LoadingState.notRegistered:\n                return (\n                    <BrowserRouter>\n                        <SiteNavbar showContent={false}/>\n                        <br/>\n                        <RegisterComponent accounts={this.state.accounts}\n                                           onRegisteredCallback={() => this.onRegistered()}/>\n                    </BrowserRouter>\n                );\n            case LoadingState.loaded:\n                return (\n                    <HashRouter>\n                        <SiteNavbar showContent={true} player={this.state.player}/>\n                        <br/>\n                        <Routing web3={this.state.web3 as Web3} player={this.state.player as database.IPlayer}/>\n                    </HashRouter>\n                );\n            default:\n                return <strong>An undefined error occured! State: {this.state.loadingState}</strong>\n        }\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport MainArea from \"./MainArea\";\nimport {Route, Switch} from \"react-router-dom\";\nimport MatchCreateArea from \"./MatchCreateArea\";\nimport MatchesArea from \"./MatchesArea\";\nimport Web3 from \"web3\";\nimport ProfileAreaComponent from \"./ProfileAreaComponent\";\nimport {IPlayer} from \"../database\";\nimport LeaderboardArea from \"./LeaderboardArea\";\n\ninterface IProps {\n    web3: Web3,\n    player: IPlayer\n}\n\nclass Routing extends Component<IProps, any> {\n    public render(): any {\n        return (\n            <div className=\"page-content\">\n                <Switch>\n                    <Route exact path=\"/\" render={() => <MainArea web3={this.props.web3} />}/>\n                    <Route path=\"/matches\" render={() => <MatchesArea web3={this.props.web3} />}/>\n                    <Route path=\"/create\" render={() => <MatchCreateArea web3={this.props.web3} />}/>\n                    <Route path=\"/profile\" render={() => <ProfileAreaComponent web3={this.props.web3}/>}/>\n                    <Route path=\"/leaderboard\" render={() => <LeaderboardArea/>}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Routing;","import React, {Component, FormEvent} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport * as database from \"../database\";\n\ninterface IState {\n    showInfo: boolean\n}\n\ninterface IProps {\n    accounts: string[],\n    onRegisteredCallback: () => void\n}\n\nclass RegisterComponent extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            showInfo: true\n        };\n\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n    }\n\n    /**\n     * Called when the user submits the registration form\n     * It will handle the input and create a new player record in the backend database\n     * @param event: FormEvent that is created by the HTML onClick\n     */\n    private onFormSubmit(event: FormEvent<HTMLFormElement>): void {\n        // Stop default behavior\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Get the input from form\n        const form: EventTarget = event.target;\n        const inputName: string = form[0].value;\n        const inputPassword: string = form[1].value;\n        const inputPasswordRepeat: string = form[2].value;\n\n        // Check if user repeated the password correctly\n        if (inputPassword !== inputPasswordRepeat) {\n            alert(\"The passwords that you entered do not match!\");\n            return;\n        }\n\n        // Register the new user\n        const player: database.IPlayer = {\n            address: this.props.accounts[0],\n            name: inputName,\n            wins: 0,\n            losses: 0,\n            earnings: 0\n        };\n        database.registerPlayer(player).then(\n            () => {\n                alert(\"Registration successful!\");\n                this.props.onRegisteredCallback();\n            },\n            (e: Error) => {\n                alert(\"An error occured during registration!\");\n                console.log(e);\n            }\n        );\n    }\n\n\n    /**\n     * This will render the information portion of the registratrion phase\n     * It will show some info to the user about making an account\n     */\n    private renderInfo() {\n        return (<div className=\"register-form\">\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Welcome!</Card.Title>\n                        <p>\n                            The current ethereum account that you have selected in MetaMask is not associated with an\n                            Easybet profile.\n                            In order to use this website, you must create a Easybet profile that consist of a profile\n                            name and password\n                        </p>\n                        <strong>This profile account is needed for the following:</strong><br/>\n                        <ul>\n                            <li>Create and view betting matches</li>\n                            <li>Participate in other matches</li>\n                            <li>View the online leaderboard</li>\n                        </ul>\n                        <br/>\n                        <strong>Please keep in mind that the following information will be visible to other players\n                            through the leaderboards:</strong>\n                        <ul>\n                            <li>The amount of ether that you have won in total through matches</li>\n                            <li>The amount of lost bets</li>\n                            <li>The amount of won bets</li>\n                        </ul>\n                        <br/>\n                        <p>If you agree to the above, please click 'Continue'</p>\n                        <Button onClick={() => this.setState({showInfo: false})}>Continue</Button>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n\n    /**\n     * Display the registration form. This is displayed after the user has clicked continue in the info portion\n     */\n    private renderForm() {\n        return (\n            <div className=\"register-form\">\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Registration</Card.Title>\n                        <p>Please fill in the following form in order to register!</p>\n                        <strong>Your address: </strong>{this.props.accounts[0]}\n                        <br/><br/>\n                        <Form onSubmit={this.onFormSubmit}>\n                            <Form.Group>\n                                <Form.Label>Profile name</Form.Label>\n                                <Form.Control placeholder=\"Enter profile name here...\"/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter password here...\"/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Repeat your password here</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Repeat your password here...\"/>\n                            </Form.Group>\n                            <ButtonGroup>\n                                <Button onClick={() => this.setState({showInfo: true})}>Go back</Button>\n                                <Button type=\"submit\">Register</Button>\n                            </ButtonGroup>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n\n    public render() {\n        if (this.state.showInfo) {\n            return this.renderInfo()\n        } else {\n            return this.renderForm();\n        }\n    }\n}\n\nexport default RegisterComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}