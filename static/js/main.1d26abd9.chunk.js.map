{"version":3,"sources":["images/brand.png","images/carousel-0.png","images/carousel-1.png","images/carousel-2.png","images/carousel-3.png","components/SiteNavbar.tsx","components/MainArea.tsx","components/Profile/ProfileOverviewComponent.tsx","data/database.ts","components/Profile/ProfileAreaComponent.tsx","components/Profile/ProfileDeleteComponent.tsx","components/LeaderboardArea.tsx","components/Misc/LoadingCard.tsx","utils.ts","data/sports.ts","data/interfaces.ts","components/Misc/ErrorCard.tsx","components/MatchCreate/MatchCreateSportsList.tsx","components/MatchCreate/MatchCreateForm.tsx","components/MatchCreate/MatchCreateArea.tsx","components/Matches/MatchClaimReward.tsx","components/Matches/MatchesList.tsx","components/Matches/MatchParticipateForm.tsx","components/Matches/MatchDebugOptions.tsx","components/Matches/MatchesArea.tsx","components/Matches/MatchOverview.tsx","components/App.tsx","components/Routing.tsx","components/RegisterComponent.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","brandImg","require","SiteNavbar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedNavBtn","_this2","showContent","react_default","a","createElement","Nav_default","className","Link","as","to","active","onClick","setState","window","addEventListener","handleScroll","passive","removeEventListener","navbar","document","getElementsByClassName","scrollY","classList","add","remove","_this3","undefined","player","name","_this4","Navbar_default","variant","expand","Brand","src","width","height","alt","Toggle","aria-controls","Collapse","id","renderLinks","renderPlayerLink","Component","imgCarousel0","imgCarousel1","imgCarousel2","imgCarousel3","MainArea","account","web3","eth","getAccounts","then","accounts","Card_default","Body","Carousel_default","Item","Caption","Title","ProfileOverviewComponent","earningsTxt","web3utils","earnings","toString","wins","losses","renderEarnings","API_URL","createMatchEntry","_x","_createMatchEntry","apply","arguments","_callee","match","response","regenerator_default","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","sent","ok","Error","concat","status","stop","getActiveMatches","_getActiveMatches","_callee2","_context2","json","abrupt","updateMatch","_x3","_updateMatch","_callee4","putResponse","_context4","t0","console","t1","log","checkIfUserIsRegistered","_x4","_checkIfUserIsRegistered","_callee5","address","_context5","_callee6","_context6","getPlayer","_x6","_getPlayer","_callee7","_context7","parseInt","getAllPlayers","_getAllPlayers","_callee11","players","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_iterator","_step","_value","_context11","asyncIterator","done","value","return","finish","deletePlayer","_x12","_deletePlayer","_callee12","_context12","ProfileArea","ProfileDeleteComponent","Alert","fire","title","text","confirmButtonText","showCancelButton","type","database","location","reload","message","Button_default","onDeleteClick","SortMode","ProfileAreaComponent","selectedProfileArea","Overview","playerLoaded","selectedprofileArea","Profile_ProfileOverviewComponent","MyMatches","DeleteProfile","Profile_ProfileDeleteComponent","loadProfile","catch","e","alert","Header","defaultActiveKey","style","marginRight","paddingTop","paddingLeft","eventKey","onTabClick","renderCardBody","LoadingCard","show","Spinner_default","animation","LeaderboardArea","isLoading","sortTitle","ByWins","populateTable","sortMode","ByLosses","ByEarnings","sort","b","wei","formattedValue","Misc_LoadingCard","Table_default","striped","bordered","hover","map","formatWeiAsEther","ButtonGroup_default","renderTable","getStrValueWithLeadingZero","PaginatedArray","array","pageSize","createClass","key","pageNumber","startIndex","endIndex","slice","Math","round","length","getEventsAtDate","_getEventsAtDate","date","dateString","getFullYear","getMonth","getDate","events","dateStart","dateEnd","res","setHours","setDate","getEventFromId","_getEventFromId","_callee3","_context3","MatchStatusCode","MatchWinningTeam","ErrorCard","msg","MatchCreateSportsList","event","onSelectCallBackFn","items","totalPages","sportEvents","getTotalPages","_loop","i","push","Pagination_default","getPageItems","index","onTableRowClick","idEvent","strEvent","strLeague","dateEvent","strTime","Prev","disabled","renderPageButtons","Next","DisplayState","abi","MatchCreateForm","isCreating","contract","form","target","preventDefault","stopPropagation","team","createMatch","selectedTeam","Contract","tx","deploy","data","bytecode","send","from","contractInstance","Date","formattedDate","contract_address","options","start_date","sport_event_id","sportEvent","status_code","WaitingForMatchDate","winning_team","None","size","role","aria-hidden","Form_default","onSubmit","Group","Label","Control","placeholder","required","strHomeTeam","strAwayTeam","InputGroup_default","Prepend","Text","pattern","createLoadingSpinner","marginLeft","onReturnClick","RewardClaimStatus","MatchCreateArea","displayState","Loading","CreateForm","selectedSportEvent","dateRangeStart","dateRangeEnd","_x2","_getEventsFromDateRange","sports","SportsList","createForm","MatchCreate_MatchCreateForm","Misc_ErrorCard","MatchCreate_MatchCreateSportsList","onSportEventSelected","MatchesList","matches","m","onMatchSelectCallbackFn","getEventName","sport_event_data","rouletteContractAbi","MatchParticipateForm","isSendingBet","addr","contract_data","homePlayers","homeTeamPlayers","awayPlayers","awayTeamPlayers","betValue","methods","bet","refreshMatchFn","matchContainsPlayer","onBetSubmit","onBetSubmitFailed","renderSubmitBtn","MatchDebugOptions","CanClaimRewards","makeTeamWin","HomeTeam","AwayTeam","All","MatchesAreaSelection","MatchClaimReward","canClaimReward","NotPartOfTeam","ReferenceError","homeTeam","awayTeam","accountAddr","canClaim","CanClaim","isInTeam","rewardIsAlreadyClaimed","AlreadyClaimed","getReward","checkIfPlayerAlreadyClaimedReward","checkIfRewardCanBeClaimed","onButtonClick","MatchOverview","caption","rows","Matches_MatchParticipateForm","Matches_MatchClaimReward","Row_default","Col_default","renderPlayerTable","playerCount","totalBetValue","renderUserOptions","Matches_MatchDebugOptions","LoadingState","MatchesArea","selectedArea","AvailableMatches","getHomeTeamPlayers","homePlayersAddr","getAwayTeamPlayers","awayPlayersAddr","getTotalBetValue","betValueWei","betValueEther","getPlayerBet","contractData","selectedMatch","area","bsPrefix","getNavTabBsPrefix","Matches_MatchesList","getMatchDetails","Matches_MatchOverview","getAllMatches","renderMatchOverviewTab","Routing","react_router","exact","path","render","components_MainArea","Matches_MatchesArea","MatchCreate_MatchCreateArea","Profile_ProfileAreaComponent","components_LeaderboardArea","RegisterComponent","showInfo","onFormSubmit","bind","assertThisInitialized","inputName","_x5","_registerPlayer","onRegisteredCallback","renderInfo","renderForm","App","loadingState","detectProvider","errorMsg","init","onInitFailed","error","failed","ethereum","noProvider","web3Provider","Web3","currentProvider","transactionConfirmationBlocks","awaitProviderAuth","enable","providerAuthFailed","notRegistered","loaded","react_router_dom","components_SiteNavbar","components_RegisterComponent","onRegistered","basename","process","components_Routing","Boolean","hostname","ReactDOM","components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d26abd9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brand.dc8c4ca3.png\";","module.exports = __webpack_public_path__ + \"static/media/carousel-0.86745bfd.png\";","module.exports = __webpack_public_path__ + \"static/media/carousel-1.2648e877.png\";","module.exports = __webpack_public_path__ + \"static/media/carousel-2.8c185ed8.png\";","module.exports = __webpack_public_path__ + \"static/media/carousel-3.4ee99ab2.png\";","import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {Link} from \"react-router-dom\";\nimport {IPlayer} from \"../data/interfaces\";\n\nconst brandImg = require(\"../images/brand.png\");\n\ninterface IState {\n    selectedNavBtn: number\n}\n\ninterface IProps {\n    showContent: boolean,\n    player?: IPlayer\n}\n\nclass SiteNavbar extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            selectedNavBtn: 0\n        };\n    }\n\n    private renderLinks() {\n        if (this.props.showContent) {\n            return (\n                <Nav className=\"mr-auto\">\n                    <Nav.Link as={Link} to=\"/\" active={this.state.selectedNavBtn === 0}\n                              onClick={() => this.setState({selectedNavBtn: 0})}>Home</Nav.Link>\n                    <Nav.Link as={Link} to=\"/matches\" active={this.state.selectedNavBtn === 1}\n                              onClick={() => this.setState({selectedNavBtn: 1})}>Matches</Nav.Link>\n                    <Nav.Link as={Link} to=\"/create\" active={this.state.selectedNavBtn === 2}\n                              onClick={() => this.setState({selectedNavBtn: 2})}>Create Match</Nav.Link>\n                    <Nav.Link as={Link} to=\"/leaderboard\" active={this.state.selectedNavBtn === 3}\n                              onClick={() => this.setState({selectedNavBtn: 3})}>Leaderboard</Nav.Link>\n                </Nav>\n            );\n        }\n    }\n\n    public componentDidMount() {\n        window.addEventListener(\"scroll\", this.handleScroll, {passive: true});\n    }\n\n    public componentWillUnmount() {\n        window.removeEventListener('scroll', this.handleScroll)\n    }\n\n    private handleScroll(): void {\n        let navbar: Element = document.getElementsByClassName(\"navbar\")[0];\n        if (window.scrollY !== 0) {\n            navbar.classList.add(\"navbar-shadow\");\n        } else {\n            navbar.classList.remove(\"navbar-shadow\");\n        }\n    }\n\n    private renderPlayerLink() {\n        if (this.props.showContent && this.props.player !== undefined) {\n            return (\n                <Nav>\n                    <Nav.Link as={Link}\n                              to=\"/profile\"\n                              active={this.state.selectedNavBtn === 4}\n                              onClick={() => this.setState({selectedNavBtn: 4})}>{this.props.player.name}\n                    </Nav.Link>\n                </Nav>\n            );\n        }\n    }\n\n    public render(): any {\n        return (\n            <Navbar variant=\"dark\" expand=\"lg\">\n                <Navbar.Brand as={Link} to=\"/\" onClick={() => this.setState({selectedNavBtn: 0})}>\n                    <img\n                        src={brandImg}\n                        width=\"90\" height=\"35\" alt=\"Logo brand\"/></Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\"/>\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    {this.renderLinks()}\n                    {this.renderPlayerLink()}\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default SiteNavbar;","import React, {Component} from \"react\";\nimport Web3 from \"web3\"\nimport Carousel from \"react-bootstrap/Carousel\";\nimport Card from \"react-bootstrap/Card\";\n\nconst imgCarousel0 = require(\"../images/carousel-0.png\");\nconst imgCarousel1 = require(\"../images/carousel-1.png\");\nconst imgCarousel2 = require(\"../images/carousel-2.png\");\nconst imgCarousel3 = require(\"../images/carousel-3.png\");\n\n\ninterface IState {\n    account: string\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MainArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            account: \"Loading...\"\n        };\n    }\n\n\n    public componentDidMount(): void {\n        this.props.web3.eth.getAccounts().then((accounts: string[]) => {\n            this.setState({account: accounts[0]})\n        });\n    }\n\n\n    public render(): React.ReactNode {\n        return (\n            <div>\n\n                <Card>\n                    <Card.Body>\n                        <Carousel>\n                            <Carousel.Item>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={imgCarousel0}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                    <h3>Welcome to CryptoBet!</h3>\n                                    <p>Scroll down to find out more about this website!</p>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={imgCarousel1}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                    <h3>Create your own betting matches!</h3>\n                                    <p>You can choose which sport event you want to bet on and create a match! Other\n                                        players can participate as well!</p>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={imgCarousel2}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                    <h3>Choose from many sport events to bet on!</h3>\n                                    <p>When creating a new bet, you can choose which sport event that you want to bet\n                                        on!</p>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                            <Carousel.Item>\n                                <img\n                                    className=\"d-block w-100\"\n                                    src={imgCarousel3}\n                                    alt=\"First slide\"\n                                />\n                                <Carousel.Caption>\n                                    <h3>Become the top betting player!</h3>\n                                    <p>We offer a leaderboard page where users can see who the top betting players are based on their earnings, wins and losses!</p>\n                                </Carousel.Caption>\n                            </Carousel.Item>\n                        </Carousel>\n                    </Card.Body>\n                    <br/>\n                    <Card.Body>\n                        <Card.Title>Welcome!</Card.Title>\n                        <strong>What is this?</strong>\n                        <p>CryptoBet is a website that allows users to create and participate in sport betting matches.\n                            What makes these betting matches unique is the fact that the currency involved here is\n                            Ethereum! We want to provide users with a way to participate in digital betting matches\n                            using the Ethereum cryptocurrency without overcomplicating the whole proccess!\n                            <br/>Our aim is to become a large betting platform that is centered around Ethereum!\n                        </p>\n                        <br/><strong>How does creating betting matches work?</strong><br/>\n                        <p>Easy! All you have to do is click on 'Create Match' on the navigation bar at the top! You\n                            will be presented with a list of currently available sport events and will be asked to\n                            choose the sport event that you wanna bet on.\n                            <br/><br/>Once you click on one, you will be taken to a form where you can give your match a\n                            name, select which team YOU will be betting on and define your own starting bet. After that,\n                            just hit 'Create' and your match will be created!<br/>\n                            <br/>When created, other players will be able to view your match and participate by placing\n                            their own bets!</p>\n                        <br/><strong>How does participating in other people's betting matches work?</strong>\n                        <p>\n                            Betting matches that have been created by other user's are visible to anyone. <br/>When you\n                            go to the Matches page, you can see all the betting matches that are currently active. Each\n                            one of those matches is created by a player.<br/>\n                            You can click on a match in order to see more details like the current amount of\n                            participants, the total bet value so far and the name of the sport event that the\n                            participants are betting on.<br/><br/>\n                            When you click on a match, you can also see a form which allows you to participate in that\n                            betting match as well!\n                        </p>\n                    </Card.Body>\n                </Card>\n                <br/><strong>Current wallet address: </strong>{this.state.account}\n            </div>\n        );\n\n    }\n}\n\nexport default MainArea;","import React, {Component} from \"react\";\nimport {IPlayer} from \"../../data/interfaces\";\nimport Web3 from \"web3\";\nimport * as web3utils from \"web3-utils\";\nimport Card from \"react-bootstrap/Card\";\n\ninterface IProps {\n    web3: Web3\n    player: IPlayer\n}\n\nclass ProfileOverviewComponent extends Component<IProps> {\n\n    /**\n     * Take the player earnings from props and format it nicely\n     * Example: \"- 3.5 Ether\" or \"+ 5.67 Ether\"\n     */\n    private renderEarnings() {\n        let earningsTxt = web3utils.fromWei(this.props.player.earnings.toString());\n\n        if (this.props.player.earnings >= 0) {\n            earningsTxt = \"+ \" + earningsTxt;\n            return <p className=\"text-success\">Earnings: {earningsTxt} Ether</p>\n        } else {\n            return <p className=\"text-danger\">Earnings: {earningsTxt} Ether</p>\n        }\n\n    }\n    \n    public render() {\n        return (\n            <Card.Body>\n                <Card.Title>{this.props.player.name}</Card.Title>\n                <strong>Statistics:</strong><br/><br/>\n                <p>Wins: {this.props.player.wins}</p>\n                <p>Losses: {this.props.player.losses}</p>\n                {this.renderEarnings()}\n            </Card.Body>\n        );\n    }\n}\n\nexport default ProfileOverviewComponent;","import {IMatch, IPlayer} from \"./interfaces\";\n\nconst API_URL = \"http://localhost:8000/api\";\n\n/**\n * Create a new match row in the backend database\n * @param match: the match object of type 'IMatch' that will be sent to db\n */\nexport async function createMatchEntry(match: IMatch): Promise<void> {\n    let response = await fetch(API_URL + \"/matches/create\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status});`);\n    }\n}\n\n/**\n * Get all the matches that exist in the backend database\n * @returns an IMatch[] array containing the match objects\n */\nexport async function getActiveMatches(): Promise<IMatch[]> {\n    let response: Response = await fetch(API_URL + \"/matches/active\");\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status})`);\n    }\n\n    return await response.json();\n}\n\n\n/**\n * Archives a specific match using the ID parameter\n * An archived match still exists in database, but wont be retrieved when calling getActiveMatches\n * @param id: the id of the specific match that we want to delete\n */\nexport async function setMatchAsArchived(id: number): Promise<void> {\n    // Retrieve match first\n    let getResponse = await fetch(API_URL + \"/matches/\" + id.toString());\n    if (!getResponse.ok) {\n        throw Error(`Failed to fetch match with ID ${id}! (${getResponse.status})`)\n    }\n    let match: IMatch = await getResponse.json();\n\n    console.log(match);\n\n    // Set match to inactive and send it back to server\n    match.active = false;\n    let putResponse = await fetch(API_URL + \"/matches/\" + id.toString(), {\n        method: \"PUT\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!putResponse.ok) {\n        console.log(await putResponse.json());\n        throw Error(`Failed to archive match ID ${id}! (${putResponse.status})`)\n    }\n}\n\nexport async function updateMatch(match: IMatch): Promise<void> {\n    let putResponse = await fetch(API_URL + \"/matches/\" + match.id, {\n        method: \"PUT\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!putResponse.ok) {\n        console.log(await putResponse.json());\n        throw Error(`Failed to archive match ID ${match.id}! (${putResponse.status})`)\n    }\n}\n\n/**\n * Checks if the user is already registered\n * It is done by attempting to get user info from backend using the address which is the primary key\n * If response is not HTTP 200 then it means the backend could not find any user that matches the address\n * @param address: the ethereum public address that belongs to a account\n * @return boolean: true if account exists, false if not\n */\nexport async function checkIfUserIsRegistered(address: string): Promise<boolean> {\n    let response = await fetch(API_URL + \"/players/\" + address);\n    return response.ok;\n}\n\n/**\n * Creates a new player object using the specified address as primary key\n * @param player: object containing the player info. See IPlayer interface!\n */\nexport async function registerPlayer(player: IPlayer): Promise<void> {\n    let response = await fetch(\n        API_URL + \"/players/create\",\n        {\n            method: \"POST\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(player)\n        }\n    );\n\n    if (!response.ok) {\n        throw Error(`Failed to create new player! (${response.status})`)\n    }\n}\n\n/**\n * Fetch a specific player using it's wallet address\n * @param address: the wallet address of the player\n */\nexport async function getPlayer(address: string): Promise<IPlayer> {\n    let response: Response = await fetch(API_URL + \"/players/\" + address);\n\n    if (!response.ok) {\n        throw Error(`Failed to fetch player with address ${address}! (${response.status})`)\n    }\n\n    let player: IPlayer = await response.json();\n    player.earnings = parseInt(player.earnings.toString());\n    return player;\n}\n\n/**\n * Update a player on the backend. It will overwrite the old player data with the new one\n * @param player: object of IPlayer type that represents the player\n */\nexport async function updatePlayer(player: IPlayer): Promise<void> {\n    let response: Response = await fetch(API_URL + \"/players/\" + player.address,\n        {\n            method: \"PUT\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(player)\n        }\n    );\n\n    console.log(\"JSON:\" + JSON.stringify(player));\n\n    if (!response.ok) {\n        console.log(response);\n        console.log(player);\n        throw Error(`Failed to update player with address ${player.address}! (${response.status})`)\n    }\n}\n\n/**\n * Update the win/loss stats of the player.\n * It will first fetch the entire player, update it and then send it back to db.\n * @param address: the string wallet address of the player\n * @param hasWon: boolean representing if it should increment the wins stat or the losses stat\n */\nexport async function updatePlayerWinLoss(address: string, hasWon: boolean): Promise<void> {\n    let player: IPlayer = await getPlayer(address);\n\n    if (hasWon) player.wins++;\n    else player.losses++;\n\n    await updatePlayer(player);\n}\n\n/**\n * Update the players total earnings. It is similar to updatePlayerWinLoss()\n * WARNING: the ether must be in wei format first or else you'll screw everything up\n * If player is meant to lose ether, then pass the earningsFromMatch param as a negative value\n * @param address: the string wallet address of the player\n * @param earningsFromMatch: the amount of ether that the player has won in wei format\n */\nexport async function updatePlayerEarnings(address: string, earningsFromMatch: number): Promise<void> {\n    let player: IPlayer = await getPlayer(address);\n    player.earnings += earningsFromMatch;\n\n    await updatePlayer(player);\n}\n\n/**\n * Fetches all the players from the backend\n * The result will be an IPlayer[] array that contains all the player objects\n * NOTE: The backend sends the earnings property as string instead of number,\n * this is not good so we will manualily convert it to number foreach player obj\n */\nexport async function getAllPlayers(): Promise<IPlayer[]> {\n    let response: Response = await fetch(API_URL + \"/players/\");\n\n    if (!response.ok) {\n        throw Error(`Failed to fetch all players! (${response.status})`)\n    }\n\n    // Since backend sends the earnings as string for some reason,\n    // we will need to convert it to number for all player objects\n    let players: IPlayer[] = await response.json();\n    for await (let player of players) {\n       player.earnings = parseInt(player.earnings.toString());\n    }\n\n    return players;\n}\n\n/**\n * Delete the player with a given player address\n * @param player: the player object that you want to delete. Needs to have valid address\n */\nexport async function deletePlayer(player: IPlayer): Promise<void> {\n    let response: Response = await fetch(API_URL + \"/players/\" + player.address,\n        {\n            method: \"DELETE\",\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n        }\n    );\n    \n    if (!response.ok) {\n        throw new Error(`Failed to delete player with ID={${player.address} (${response.status})`)\n    }\n}","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Web3 from \"web3\";\nimport Nav from \"react-bootstrap/Nav\";\nimport ProfileOverviewComponent from \"./ProfileOverviewComponent\";\nimport {IPlayer} from \"../../data/interfaces\";\nimport {getPlayer} from \"../../data/database\";\nimport ProfileDeleteComponent from \"./ProfileDeleteComponent\";\n\nenum ProfileArea {\n    Overview,\n    MyMatches,\n    DeleteProfile\n}\n\ninterface IState {\n    selectedProfileArea: ProfileArea,\n    player: IPlayer,\n    playerLoaded: boolean\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass ProfileAreaComponent extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            selectedProfileArea: ProfileArea.Overview,\n            player: {\n                address: \"Loading...\",\n                name: \"Loading...\",\n                wins: 0,\n                losses: 0,\n                earnings: 0\n            },\n            playerLoaded: false\n        };\n    }\n\n    /**\n     * Called when user clicks on a tab option\n     * Will update the currently selected profile area enum in the state with the new value\n     * @param selectedprofileArea: The profile area tab that the user selected\n     */\n    private onTabClick(selectedprofileArea: ProfileArea): void {\n        this.setState({selectedProfileArea: selectedprofileArea});\n    }\n\n    /**\n     * Render the body of the Profile card by checking what area is currently selected\n     * It will then render it's component.\n     */\n    private renderCardBody() {\n        switch (this.state.selectedProfileArea) {\n            case ProfileArea.Overview:\n                return <ProfileOverviewComponent web3={this.props.web3} player={this.state.player}/>;\n            case ProfileArea.MyMatches:\n                return <strong>My matches</strong>;\n            case ProfileArea.DeleteProfile:\n                return <ProfileDeleteComponent player={this.state.player}/>\n        }\n    }\n\n    /**\n     * Load the player profile by getting the wallet address from web3 and using it to load the profile from db\n     */\n    private async loadProfile(): Promise<void> {\n        let accounts: string[] = await this.props.web3.eth.getAccounts();\n        let player: IPlayer = await getPlayer(accounts[0]);\n\n        this.setState({player: player, playerLoaded: true});\n    }\n    \n    public componentDidMount(): void {\n        this.loadProfile().catch((e: Error) => alert(e));\n    }\n\n    public render() {\n        if (this.state.playerLoaded) {\n            return (\n                <Card>\n                    <Card.Header>\n                        <Nav variant=\"tabs\" defaultActiveKey={ProfileArea.Overview}>\n                            <Nav.Item style={{marginRight: \"12px\", paddingTop: \"0.5rem\", paddingLeft: \"1.0rem\"}}>\n                                My Profile\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey={ProfileArea.Overview} onClick={() => this.onTabClick(ProfileArea.Overview)}>Overview</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey={ProfileArea.MyMatches} onClick={() => this.onTabClick(ProfileArea.MyMatches)}>My Matches</Nav.Link>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Nav.Link eventKey={ProfileArea.DeleteProfile} onClick={() => this.onTabClick(ProfileArea.DeleteProfile)}>Delete Profile</Nav.Link>\n                            </Nav.Item>\n                        </Nav>\n                    </Card.Header>\n                    {this.renderCardBody()}\n                </Card>\n            );\n        } else {\n            return <strong>Loading...</strong>;\n        }\n    }\n}\n\nexport default ProfileAreaComponent;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\"\nimport Button from \"react-bootstrap/Button\";\nimport * as database from \"../../data/database\";\nimport {IPlayer} from \"../../data/interfaces\";\nimport Alert, {SweetAlertResult} from 'sweetalert2'\n\ninterface IProps {\n    player: IPlayer\n}\n\nclass ProfileDeleteComponent extends Component<IProps, any> {\n\n    /**\n     * Delete the user profile. This is dony by calling database.deletePlayer\n     * This requires the player prop to have the correct player object.\n     * Will also display an error popup if database operation fails\n     */\n    private async onDeleteClick() {\n        let res: SweetAlertResult = await Alert.fire({\n            title: \"Please confirm\",\n            text: \"This action cannot be reversed!\",\n            confirmButtonText: \"Confirm\",\n            showCancelButton: true,\n            type: \"warning\"\n        });\n        \n        if (!res.value) return;\n        \n        try {\n            await database.deletePlayer(this.props.player);\n            window.location.reload();\n        } catch (e) {\n            console.log(e);\n            Alert.fire({\n                title: e.name,\n                text: e.message,\n                confirmButtonText: \"OK\",\n                type: \"error\"\n            })\n        }\n    }\n    \n    public render(): React.ReactNode {\n        return (\n            <Card.Body>\n                <Card.Title>Delete your profile</Card.Title>\n                <p>\n                    It is possible to delete your profile. Deleting your profile will also remove any leaderboard related data!\n                </p>\n                <p>\n                    Please note that you will be unable to access the site again unles you create a new account!.\n                </p>\n                <strong className=\"text-danger\">THIS PROCESS CANNOT BE REVERSED!</strong><br/><br/>\n                <Button variant=\"danger\" onClick={() => this.onDeleteClick()}>DELETE PROFILE</Button>\n            </Card.Body>\n        );\n    }\n}\n\nexport default ProfileDeleteComponent;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Table from \"react-bootstrap/Table\";\nimport LoadingCard from \"./Misc/LoadingCard\";\nimport * as database from \"../data/database\";\nimport {IPlayer} from \"../data/interfaces\";\nimport * as web3utils from 'web3-utils';\n\nenum SortMode {\n    ByWins = \"by wins\",\n    ByLosses = \"by losses\",\n    ByEarnings = \"by earnings\"\n}\n\ninterface IState {\n    isLoading: boolean,\n    players: IPlayer[],\n    sortTitle: string\n}\n\ninterface IProps {\n}\n\nclass LeaderboardArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            players: [],\n            sortTitle: SortMode.ByWins\n        };\n    }\n\n    public componentDidMount(): void {\n        this.populateTable(SortMode.ByWins).catch((e: Error) => alert(e));\n    }\n\n    /**\n     * Get all the players from backend, sort it depending on the input and then update state\n     * It is called by the onClick event of the 'sort by' buttons at the top of the table\n     * @param sortMode: enum value that controls how the data will be sorted\n     */\n    private async populateTable(sortMode: SortMode): Promise<void> {\n        this.setState({isLoading: true});\n\n        let players: IPlayer[] = await database.getAllPlayers();\n\n        // See: https://www.w3schools.com/js/js_array_sort.asp for more info about sorting function\n        switch (sortMode) {\n            case SortMode.ByWins:\n                players.sort(function (p: IPlayer, b: IPlayer) {\n                    return b.wins - p.wins\n                });\n                break;\n            case SortMode.ByLosses:\n                players.sort(function (p: IPlayer, b: IPlayer) {\n                    return b.losses - p.losses\n                });\n                break;\n            case SortMode.ByEarnings:\n                players.sort(function (p: IPlayer, b: IPlayer) {\n                    return b.earnings - p.earnings\n                });\n                break;\n        }\n        this.setState({\n            isLoading: false,\n            players: players,\n            sortTitle: sortMode\n        });\n    }\n\n    private formatWeiAsEther(wei: number) {\n        let formattedValue: string = web3utils.fromWei(web3utils.toBN(wei)) + \" Ether\";\n\n        if (wei > 0) {\n            return <div className=\"text-success\">{\"+\"+formattedValue}</div>\n        } else {\n            return <div className=\"text-danger\">{formattedValue}</div>\n        }\n    }\n\n    /**\n     * Renders the leaderboard table containing the data.\n     * If the component is still loading data, we will display a loadingcard instead\n     */\n    private renderTable() {\n        if (this.state.isLoading) {\n            return <LoadingCard text={\"Loading leaderboard data...\"} show={true}/>;\n        }\n\n        return (\n            <Table striped bordered hover>\n                <thead>\n                <tr>\n                    <th>Username</th>\n                    <th>Wins</th>\n                    <th>Losses</th>\n                    <th>Earnings</th>\n                </tr>\n                </thead>\n                <tbody>\n                {this.state.players.map((player: IPlayer) => (\n                    <tr>\n                        <td>{player.name}</td>\n                        <td>{player.wins}</td>\n                        <td>{player.losses}</td>\n                        <td>{this.formatWeiAsEther(player.earnings)}</td>\n                    </tr>\n                ))}\n                </tbody>\n            </Table>\n        );\n    }\n\n    public render() {\n        return (\n            <div>\n                <h1>Leaderboard</h1>\n                <hr/>\n                <p>On this page, you can access the online leaderboard where you can see the top players per score\n                    type!</p>\n                <Card>\n                    <Card.Header>Leaderboard</Card.Header>\n                    <Card.Body>\n                        <Card.Title>Top players {this.state.sortTitle}</Card.Title>\n                        <div className=\"d-flex flex-column\">\n                            <ButtonGroup>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByWins).catch((e: Error) => alert(e))}>Sort\n                                    by wins</Button>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByLosses).catch((e: Error) => alert(e))}>Sort\n                                    by losses</Button>\n                                <Button\n                                    onClick={() => this.populateTable(SortMode.ByEarnings).catch((e: Error) => alert(e))}>Sort\n                                    by earnings</Button>\n                            </ButtonGroup>\n                        </div>\n                        <br/>\n                        {this.renderTable()}\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default LeaderboardArea;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\ninterface IProps {\n    text: string,\n    show: boolean\n}\n\nclass LoadingCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" text/>\n                            <br/><br/>\n                            <Card.Title><strong>{this.props.text}</strong></Card.Title>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default LoadingCard;","/**\n * Turn a number into a string with a leading zero\n * The sports API breaks if the numbers don't have a leading zero so this is a quick workaround...\n * @param value: the number that we wish to convert (only tested positive integers...)\n */\nexport function getStrValueWithLeadingZero(value: number): string {\n    if (value < 10 && value > -10) {\n        return \"0\" + value.toString();\n    } else {\n        return value.toString()\n    }\n}\n\n/**\n * This class allows you to paginate an array and get data from it as pages.\n * The generic type 'T' specifies the type of the array\n */\nexport class PaginatedArray<T> {\n    // The internal array that will be paginated\n    private readonly array: T[];\n    // Max size of each page\n    private readonly pageSize: number;\n\n    /**\n     * When creating an instance, the following paramaters are required:\n     * @param array: the array that you wish to split in pages\n     * @param pageSize: max pagesize of each page\n     */\n    constructor(array: T[], pageSize: number) {\n        this.array = array;\n        this.pageSize = pageSize;\n    }\n\n    /**\n     * Return the full array that you supplied in the constructor\n     */\n    public getArray(): T[] {\n        return this.array;\n    }\n\n    /**\n     * Get the contents of a specific page\n     * @param pageNumber: the specific page that you want the content of\n     */\n    public getPageItems(pageNumber: number): T[] {\n        if (pageNumber < 1) throw new Error(\"pageNumber can not be zero or negative!\");\n\n        let startIndex: number = (pageNumber - 1) * this.pageSize;\n        let endIndex: number = startIndex + this.pageSize;\n\n        return this.array.slice(startIndex, endIndex)\n    }\n\n    /**\n     * Return the total amount of pages\n     */\n    public getTotalPages(): number {\n        let pageSize: number = Math.round(this.array.length / this.pageSize);\n\n        if (pageSize < 1) pageSize = 1;\n        return pageSize\n\n    }\n\n}","import {ISportEvent} from \"./interfaces\";\nimport {getStrValueWithLeadingZero} from \"../utils\";\n\nconst API_URL = \"https://www.thesportsdb.com\";\n\n/**\n * @description Get all the sport events of the MLB league from a specific date\n * @WARNING: The league parameter is currently hardcoded in the url (l=MLB)\n * @param date: string representation of the date that the matches belong to (YYYY-MM-DD)\n * @returns an array containing objects of type ISportEvent\n */\nexport async function getEventsAtDate(date: Date): Promise<ISportEvent[]> {\n    // The public API breaks if the day/month value do not have a leading 0 when the value is under 10\n    // So we will use getStrValueWithLeadingZero which returns the string version with a leading 0\n    let dateString: string = `${date.getFullYear()}-${getStrValueWithLeadingZero(date.getMonth() + 1)}-${getStrValueWithLeadingZero(date.getDate())}`; // Example: 2019-05-20\n\n    let response: Response = await fetch(`https://www.thesportsdb.com/api/v1/json/1/eventsday.php?d=${dateString}&s=Soccer`);\n    // The sport events are located in the events object of the response JSON\n    return (await response.json()).events;\n}\n\n/**\n * Just like with getEventsAtDate we get all matches, but this time from a date range instead of specific date\n * it will include the matches between dateStart and dateEnd\n * @param dateStart: the start date of the range\n * @param dateEnd: the end date of the range\n */\nexport async function getEventsFromDateRange(dateStart: Date, dateEnd: Date): Promise<ISportEvent[]> {\n    // We want to compare the date itself, not the time\n    dateStart.setHours(0,0,0,0);\n    dateEnd.setHours(0,0,0,0);\n\n    let events: ISportEvent[] = [];\n\n    // For each date in the range, we will call getEventsAtDate and merge it results with the events array\n    while (dateStart <= dateEnd) {\n        let res: ISportEvent[] = await getEventsAtDate(dateStart);\n        events = events.concat(res);\n        dateStart.setDate(dateStart.getDate() + 1);\n    }\n\n    return events;\n}\n\n/**\n * Get a specific event using it's event ID\n * @param id: represents the unique ID of the sport event\n */\nexport async function getEventFromId(id: number): Promise<ISportEvent> {\n    let response: Response = await fetch(API_URL + `/api/v1/json/1/lookupevent.php?id=${id}`);\n\n    if (!response.ok) {\n        throw new Error(`Failed to fetch sport event with ID ${id} (${response.status})`);\n    }\n\n    return (await response.json()).events[0];\n}","// Defines a match object\nexport interface IMatch {\n    id?: number\n    title: string,\n    contract_address: string,\n    start_date: string,\n    active: boolean,\n    sport_event_id: number,\n    sport_event_data?: ISportEvent, // Optional, used for convenience\n    status_code: MatchStatusCode,\n    winning_team: MatchWinningTeam,\n    contract_data?: IContractData // Optional, used for convenience\n}\n\n// Defines a player object\nexport interface IPlayer {\n    [key: number]: any\n    address: string,\n    name: string\n    wins: number,\n    losses: number\n    earnings: number\n}\n\nexport interface ISportEvent {\n    idEvent: number,\n    strEvent: string,\n    strLeague: string\n    dateEvent: string,\n    strTime: string\n    strHomeTeam: string,\n    strAwayTeam: string,\n}\n\nexport enum MatchStatusCode {\n    WaitingForMatchDate = 0,\n    Pending = 1,\n    CanClaimRewards = 2,\n    RewardsClaimed = 3\n}\n\nexport enum MatchWinningTeam {\n    None = -1,\n    HomeTeam = 0,\n    AwayTeam = 1,\n    All = 2\n}","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\ninterface IProps {\n    title: string,\n    msg: string\n    show: boolean\n}\n\nclass ErrorCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Card.Title><strong>{this.props.title}</strong></Card.Title>\n                            <br/><br/>\n                            <strong>{this.props.msg}</strong>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default ErrorCard;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\nimport {ISportEvent} from \"../../data/interfaces\";\nimport {PaginatedArray} from \"../../utils\";\nimport Pagination from \"react-bootstrap/Pagination\";\n\ninterface IState {\n    pageNumber: number\n}\n\ninterface IProps {\n    sportEvents: PaginatedArray<ISportEvent>,\n    show: boolean,\n    onSelectCallBackFn?: (event: ISportEvent) => void\n}\n\nclass MatchCreateSportsList extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            pageNumber: 1\n        };\n    }\n\n    /**\n     * This is called by the HTML table in render() when user clicks on a table row\n     * It will use the callback function onSelectCallBackFn to notify parent component that user has selected a match\n     * The callback function is optional. If not defined, then nothing will happen\n     * @param event: the sport event object that represented the row that was clicked\n     */\n    private onTableRowClick(event: ISportEvent): void {\n        if (this.props.onSelectCallBackFn !== undefined) {\n            this.props.onSelectCallBackFn(event);\n        }\n    }\n\n    private renderPageButtons(): React.ReactNodeArray {\n        let items: React.ReactNodeArray = [];\n        let totalPages = this.props.sportEvents.getTotalPages();\n\n        for (let i=1; i <= totalPages; i++) {\n            items.push(<Pagination.Item onClick={() => this.setState({pageNumber: i})} active={i === this.state.pageNumber}>{i}</Pagination.Item>);\n        }\n\n        return items;\n    }\n\n    public render() {\n        if (!this.props.show) return null;\n\n        return (\n            <Card>\n                <Card.Header>Select a sport event that you want to bet on</Card.Header>\n                <Card.Body>\n                    <Table hover={true}>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>Event name</th>\n                            <th>Category</th>\n                            <th>League name</th>\n                            <th>Event date</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.props.sportEvents.getPageItems(this.state.pageNumber).map((event: ISportEvent, index: number) => (\n                            <tr onClick={() => this.onTableRowClick(event)} className=\"cursor-pointer\">\n                                <td>{event.idEvent}</td>\n                                <td>{event.strEvent}</td>\n                                <td>Soccer</td>\n                                <td>{event.strLeague}</td>\n                                <td>{event.dateEvent + \" \" + event.strTime}</td>\n                            </tr>\n                        ))}\n                        </tbody>\n                    </Table>\n                    <Pagination>\n                        <Pagination.Prev onClick={() => this.setState({pageNumber: this.state.pageNumber - 1})} disabled={this.state.pageNumber <= 1}>Prev</Pagination.Prev>\n                        {this.renderPageButtons()}\n                        <Pagination.Next onClick={() => this.setState({pageNumber: this.state.pageNumber + 1})} disabled={this.state.pageNumber >= this.props.sportEvents.getTotalPages()}>Next</Pagination.Next>\n                    </Pagination>\n                </Card.Body>\n            </Card>\n        );\n    }\n}\n\nexport default MatchCreateSportsList;","import React, {Component, FormEvent} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Web3 from \"web3\";\nimport * as web3utils from 'web3-utils';\nimport * as database from \"../../data/database\";\nimport BN from \"bn.js\";\nimport Contract from \"web3/eth/contract\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport {IMatch, ISportEvent, MatchStatusCode, MatchWinningTeam} from \"../../data/interfaces\";\nimport Alert from 'sweetalert2'\n\n\nconst abi: any = require(\"../../contracts/RouletteContract\");\n\ninterface IState {\n    isCreating: boolean,\n    contract?: Contract,\n    account: string,\n}\n\ninterface IProps {\n    web3: Web3,\n    sportEvent: ISportEvent,\n    onReturnClick?: () => void\n    show?: boolean\n}\n\nclass MatchCreateForm extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isCreating: false,\n            account: \"\",\n            contract: undefined,\n        };\n    }\n\n    /**\n     *   This method is run when user clicks on 'Create' button\n     *   This will handle form input and create a new match\n     *   @param event: The html form event\n     */\n    private onSubmit(event: FormEvent<HTMLFormElement>): void {\n        const form: EventTarget = event.target;\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Make sure the button is disabled and showing loading icon\n        this.setState({isCreating: true});\n\n\n        // Get the ether that the user inputted and convert to wei\n        const wei: BN = web3utils.toWei(form[2].value);\n        const team: number = form[1].value;\n        const title: string = form[0].value;\n\n        this.createMatch(title, wei, team).then(\n            () => console.log(\"Match has been created!\"),\n            (e: Error) => {\n                Alert.fire({title: e.name, text: e.message, type: \"error\", confirmButtonText: \"Ok\"});\n                this.setState({isCreating: false});\n            }\n        )\n    }\n\n    /**\n     *  This will use the form input to create a new match\n     *  First it will get the current account that is logged in and from there it will create a new smart contract\n     *  Details of the contract will also be saved to database\n     *  @param title: The name of the match. Will be saved to db\n     *  @param wei: The amount of ether in 'wei' format\n     *  @param selectedTeam: the team that the user selected 0 = home team, 1 = away team\n     */\n    private async createMatch(title: string, wei: BN, selectedTeam: number): Promise<void> {\n        // Get the user accounts that are available in MetaMask\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n        // Create the contract object that we will use to deploy and interact with the contract\n        const contract = new this.props.web3.eth.Contract(abi.abi);\n\n        // Deploy a new instance of the contract and send a transaction to it containing the bet value\n        // The new instance will be stored in contractInstance\n        let tx: any = contract.deploy({data: abi.bytecode,arguments: [selectedTeam]});\n        let contractInstance: Contract = await tx.send({\n            from: accounts[0], // Account of the sender\n            value: wei.toString() // The bet value in wei\n        });\n\n/*      let method = contract.methods.bet(1);\n      await method.send({\n        from: accounts[0],\n        value: wei.toString()\n      });*/\n\n        let date: Date = new Date();\n        let formattedDate: string = `${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`;\n        console.log(formattedDate);\n\n        // Create a new match entry in the database\n        let match: IMatch = {\n            title: title,\n            contract_address: contractInstance.options.address,\n            start_date: formattedDate,\n            active: true,\n            sport_event_id: this.props.sportEvent.idEvent,\n            status_code: MatchStatusCode.WaitingForMatchDate,\n            winning_team: MatchWinningTeam.None\n        };\n        console.log(match);\n        await database.createMatchEntry(match);\n        this.setState({isCreating: false});\n        // noinspection JSIgnoredPromiseFromCall\n        Alert.fire({title: \"Done!\", text: \"Match has been sucesfully created!\", type: \"success\", confirmButtonText: \"Ok\"});\n\n    }\n\n    private createLoadingSpinner() {\n        if (this.state.isCreating) {\n            return (\n                <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                />\n            );\n        }\n        return null;\n    }\n\n    public render(): React.ReactNode {\n        if (!this.props.show) return null;\n\n        return <div>\n            <Card>\n                <Card.Body>\n                    <Card.Title>Enter new match details</Card.Title>\n                    <strong>Selected\n                        sport: </strong>{`${this.props.sportEvent.strEvent} (${this.props.sportEvent.dateEvent} ${this.props.sportEvent.strTime})`}\n                    <br/><br/>\n                    <Form onSubmit={(e: FormEvent<HTMLFormElement>) => this.onSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Match Title:</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter match title here...\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Select Team:</Form.Label>\n                          \n                            <Form.Control as=\"select\">\n                              <option value={0}>{this.props.sportEvent.strHomeTeam}</option>\n                              <option value={1}>{this.props.sportEvent.strAwayTeam}</option>\n                            </Form.Control>\n                            <Form.Label>Your bet</Form.Label>\n                        </Form.Group>\n                      <Form.Group>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"double\" placeholder=\"Enter bet value here...\" pattern=\"(^-?[0-9.]+)\"\n                                              required/>\n                            </InputGroup>\n                        </Form.Group>\n                        <p>Once you have created the match, other users will be able to see it and even participate\n                            in it with their own ether!</p>\n                            <Button type=\"submit\"\n                                    disabled={this.state.isCreating}>{this.createLoadingSpinner()} Create</Button>\n                            <Button variant=\"light\" style={{marginLeft: \"10px\"}} onClick={this.props.onReturnClick}>Select another match</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </div>;\n    }\n}\n\nexport default MatchCreateForm;\n","import React, {Component} from \"react\";\nimport Web3 from \"web3\";\nimport * as sports from \"../../data/sports\";\nimport {ISportEvent} from \"../../data/interfaces\";\nimport ErrorCard from \"../Misc/ErrorCard\";\nimport LoadingCard from \"../Misc/LoadingCard\";\nimport MatchCreateSportsList from \"./MatchCreateSportsList\";\nimport MatchCreateForm from \"./MatchCreateForm\";\nimport {PaginatedArray} from \"../../utils\";\n\n\nenum DisplayState {\n    Loading,\n    SportsList,\n    CreateForm,\n    Error\n}\n\ninterface IState {\n    displayState: DisplayState,\n    sportEvents: ISportEvent[],\n    selectedSportEvent?: ISportEvent\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MatchCreateArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            displayState: DisplayState.Loading,\n            sportEvents: []\n        };\n    }\n\n    /**\n     * Handles the event when user selects a sport event. The specific event will be saved to state.\n     * We will then show the match creation form to the user so that a match can be created from that specific sport event\n     * This function will be passed as props to the component MatchCreateSportsList as that handles the sports list\n     * @param event: the sport event object that represented the row that was clicked\n     */\n    private onSportEventSelected(event: ISportEvent): void {\n        this.setState({\n            displayState: DisplayState.CreateForm,\n            selectedSportEvent: event\n        });\n    }\n\n    public componentDidMount(): void {\n        let dateRangeStart = new Date();\n        let dateRangeEnd = new Date();\n        // The date range will be 7 days\n        dateRangeEnd.setDate(dateRangeStart.getDate() + 7);\n\n        // Get all the sport events from the specified date range\n        sports.getEventsFromDateRange(dateRangeStart, dateRangeEnd).then(\n            (events: ISportEvent[]) => {\n                this.setState({\n                    displayState: DisplayState.SportsList,\n                    sportEvents: events\n                });\n            },\n            (e: Error) => {\n                alert(e);\n                this.setState({\n                    displayState: DisplayState.Error\n                });\n            }\n        );\n    }\n\n    public render() {\n        // Only include the MatchCreateForm component if selectedSportEvent is actually defined. Else we get error :(\n        let createForm;\n        if (this.state.selectedSportEvent !== undefined) {\n            createForm = <MatchCreateForm\n                web3={this.props.web3}\n                sportEvent={this.state.selectedSportEvent as ISportEvent}\n                onReturnClick={() => this.setState({displayState: DisplayState.SportsList})}\n                show={this.state.displayState === DisplayState.CreateForm}/>\n        }\n\n        return (\n            <div>\n                <h1>Match creation</h1>\n                <hr/>\n                <p>On this page, you can create a new betting match that other players can participate in!\n                    <br/>First you will need to select the sport event that you want to start a new bet on.\n                    From there you can define your starting bet. Once the date of the sport event has passed, the winners will recieve their rewards.\n                </p>\n                <ErrorCard title=\"Error!\" msg=\"An error has occured while proccesing your request. Please try again later!\" show={this.state.displayState === DisplayState.Error}/>\n                <LoadingCard text={\"Loading data, please wait...\"} show={this.state.displayState === DisplayState.Loading}/>\n                <MatchCreateSportsList sportEvents={new PaginatedArray<ISportEvent>(this.state.sportEvents, 20)} show={this.state.displayState === DisplayState.SportsList} onSelectCallBackFn={(event: ISportEvent) => this.onSportEventSelected(event)}/>\n                {createForm}\n            </div>\n        );\n    }\n}\n\nexport default MatchCreateArea","import React, {Component} from \"react\";\nimport {IMatch, MatchWinningTeam} from \"../../data/interfaces\";\nimport Alert from \"sweetalert2\";\nimport Web3 from \"web3\";\nimport Button from \"react-bootstrap/Button\";\n\nconst rouletteContractAbi = require(\"../../contracts/RouletteContract\");\n\nenum RewardClaimStatus {\n    CanClaim,\n    NotPartOfTeam,\n    AlreadyClaimed\n}\n\ninterface IState {\n    isLoading: boolean,\n    canClaimReward: RewardClaimStatus\n}\n\ninterface IProps {\n    web3: Web3,\n    match: IMatch,\n    refreshMatchFn: (m: IMatch) => void\n}\n\nclass MatchClaimReward extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isLoading: true,\n            canClaimReward: RewardClaimStatus.NotPartOfTeam\n        };\n    }\n\n    /**\n     * Checks if the player is eligable for rewards.\n     * If player address is not found within the winning team, then permission is denied\n     */\n    private async checkIfRewardCanBeClaimed(): Promise<void> {\n        if (this.props.match.contract_data === undefined) {\n            throw new ReferenceError(\"Contract data is not defined!\");\n        }\n\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance = new this.props.web3.eth.Contract(rouletteContractAbi.abi, this.props.match.contract_address);\n\n        const homeTeam: IContractPlayer[] = this.props.match.contract_data.homeTeamPlayers;\n        const awayTeam: IContractPlayer[] = this.props.match.contract_data.awayTeamPlayers;\n        const accountAddr: string = (await this.props.web3.eth.getAccounts())[0];\n\n        let canClaim: RewardClaimStatus = RewardClaimStatus.CanClaim;\n\n        switch (this.props.match.winning_team) {\n            case MatchWinningTeam.HomeTeam:\n                if (!this.isInTeam(accountAddr, homeTeam)) canClaim = RewardClaimStatus.NotPartOfTeam;\n                if ((await this.rewardIsAlreadyClaimed(contractInstance, accountAddr))) canClaim = RewardClaimStatus.AlreadyClaimed;\n                break;\n            case MatchWinningTeam.AwayTeam:\n                if (!this.isInTeam(accountAddr, awayTeam)) canClaim = RewardClaimStatus.NotPartOfTeam;\n                if ((await this.rewardIsAlreadyClaimed(contractInstance, accountAddr))) canClaim = RewardClaimStatus.AlreadyClaimed;\n                break;\n            case MatchWinningTeam.All:\n                if (!this.isInTeam(accountAddr, awayTeam) && !this.isInTeam(accountAddr, homeTeam)) canClaim = RewardClaimStatus.NotPartOfTeam;\n                if ((await this.rewardIsAlreadyClaimed(contractInstance, accountAddr))) canClaim = RewardClaimStatus.AlreadyClaimed;\n                break;\n            default:\n                canClaim = RewardClaimStatus.NotPartOfTeam;\n                break;\n        }\n\n        this.setState({\n            isLoading: false,\n            canClaimReward: canClaim\n        });\n    }\n\n    /**\n     * Loops through a given contract team to see if the target address is part of that team\n     * @param addr: the address that we need to check\n     * @param team: the team that we will be checking\n     */\n    private isInTeam(addr: string, team: IContractPlayer[]): boolean {\n        for (let i = 0; i < team.length; i++) {\n            if (team[i].address === addr) return true;\n        }\n        return false;\n    }\n\n    private async onButtonClick(): Promise<void> {\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance = new this.props.web3.eth.Contract(rouletteContractAbi.abi, this.props.match.contract_address);\n\n        const account: string = (await this.props.web3.eth.getAccounts())[0];\n\n        let method = contractInstance.methods.getReward(this.props.match.winning_team);\n        await method.send({from: account});\n        await Alert.fire({\n            title: \"Done!\",\n            text: \"Your reward has been claimed!\",\n            type: \"success\"\n        });\n        this.props.refreshMatchFn(this.props.match);\n\n    }\n\n    private async rewardIsAlreadyClaimed(contractInstance: any, account: string): Promise<boolean> {\n        let method = contractInstance.methods.checkIfPlayerAlreadyClaimedReward();\n        return await method.call({from: account});\n    }\n\n    public componentDidMount(): void {\n        this.checkIfRewardCanBeClaimed().catch((e: Error) => Alert.fire({\n                title: e.name,\n                text: e.message,\n                type: \"error\"\n            })\n        );\n    }\n\n\n    public render() {\n        if (this.state.isLoading) return <strong>Loading...</strong>;\n        if (this.state.canClaimReward === RewardClaimStatus.NotPartOfTeam) return <strong>You cannot claim any rewards\n            because you either aren't part of\n            this match or your chosen team lost!</strong>;\n        if (this.state.canClaimReward === RewardClaimStatus.AlreadyClaimed) return <strong>You already claimed your\n            reward!</strong>;\n\n        return (\n            <div>\n                <strong>Your chosen team has won! Press the button below to claim your rewards!</strong>\n                <br/><br/>\n                <Button onClick={() => this.onButtonClick().catch((e: Error) => Alert.fire({\n                    title: e.name,\n                    text: e.message,\n                    type: \"error\"\n                }))}>Claim reward</Button>\n            </div>\n        );\n    }\n}\n\nexport default MatchClaimReward;","import React, {Component} from \"react\";\nimport {IMatch, ISportEvent, MatchStatusCode} from \"../../data/interfaces\";\nimport Table from \"react-bootstrap/Table\";\nimport Card from \"react-bootstrap/Card\";\n\ninterface IProps {\n    matches: IMatch[],\n    onMatchSelectCallbackFn: (match: IMatch) => void\n}\n\nclass MatchesList extends Component<IProps, any> {\n\n    private getEventName(event: ISportEvent | undefined): string {\n        if (event === undefined) return \"No info available\";\n        return (event as ISportEvent).strEvent;\n    }\n\n    public render() {\n        return (\n            <Card.Body>\n                <Table striped bordered hover>\n                    <thead>\n                    <tr>\n                        <th>#</th>\n                        <th>Title</th>\n                        <th>Event name</th>\n                        <th>Created on</th>\n                        <th>Status</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    {this.props.matches.map((m: IMatch) => (\n                        <tr onClick={() => this.props.onMatchSelectCallbackFn(m)}  className=\"cursor-pointer\">\n                            <td>{m.id}</td>\n                            <td>{m.title}</td>\n                            <td>{this.getEventName(m.sport_event_data)}</td>\n                            <td>{m.start_date}</td>\n                            <td>{MatchStatusCode[m.status_code]}</td>\n                        </tr>\n                    ))}\n                    </tbody>\n                </Table>\n            </Card.Body>\n        );\n    }\n}\n\nexport default MatchesList;","import React, {Component, FormEvent} from \"react\";\nimport {IMatch, MatchStatusCode} from \"../../data/interfaces\";\nimport Alert from 'sweetalert2'\nimport Web3 from \"web3\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport * as web3utils from 'web3-utils';\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst rouletteContractAbi = require(\"../../contracts/RouletteContract\");\n\ninterface IState {\n    address: string,\n    isLoading: boolean,\n    isSendingBet: boolean\n}\n\ninterface IProps {\n    match: IMatch,\n    web3: Web3,\n    refreshMatchFn: (m: IMatch) => void\n}\n\nclass MatchParticipateForm extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            address: \"N/A\",\n            isLoading: true,\n            isSendingBet: false\n        }\n    }\n\n    /**\n     * Check if the player is part of the match by comparing its address with the participents\n     * If address is found within the home players team and away players team then player is part of match\n     * @param addr: the address of the player that we wanna check if its part of match\n     * @returns true if part of match, otherwise false\n     */\n    private matchContainsPlayer(addr: string): boolean {\n        if (this.props.match.contract_data === undefined) {\n            Alert.fire({\n                title: \"Error!\",\n                text: \"Contract data object of match was undefined!\",\n                type: \"error\"\n            });\n            return false;\n        }\n\n        const homePlayers: IContractPlayer[] = this.props.match.contract_data.homeTeamPlayers;\n        const awayPlayers: IContractPlayer[] = this.props.match.contract_data.awayTeamPlayers;\n        for (let i = 0; i < awayPlayers.length; i++) {\n            if (awayPlayers[i].address === addr) return true;\n        }\n        for (let i = 0; i < homePlayers.length; i++) {\n            if (homePlayers[i].address === addr) return true;\n        }\n        return false;\n\n    }\n\n    /**\n     * Called when user clicks on the Submit button\n     * This will submit the entered bet amount\n     * @param event: Form submit event containing the form and input\n     */\n    private async onBetSubmit(event: FormEvent<HTMLFormElement>) {\n        // isSendingBet flag will disable the submit button\n        this.setState({isSendingBet: true});\n\n        const form: EventTarget = event.target;\n\n        // Prevent default behavior\n        event.preventDefault();\n        event.stopPropagation();\n\n        // The bet value that was entered in the form\n        const selectedTeam: number = form[0].value;\n        const betValue: string = form[1].value;\n        const wei: string = web3utils.toWei(betValue);\n\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance: any = new this.props.web3.eth.Contract(rouletteContractAbi.abi, this.props.match.contract_address);\n\n        // Get the bet method and send a transaction to it\n        let method = contractInstance.methods.bet(selectedTeam);\n        await method.send({\n            from: this.state.address,\n            value: wei.toString()\n        });\n\n\n        await Alert.fire({title: \"Done!\", text: \"Your bet has been succesfully submitted!\", type: \"success\"});\n        this.setState({isSendingBet: false});\n        this.props.refreshMatchFn(this.props.match);\n    }\n\n    private async onBetSubmitFailed(e: Error): Promise<void> {\n        await Alert.fire({title: e.name, text: e.message, type:\"error\"});\n        this.setState({isSendingBet: false});\n    }\n\n    private renderSubmitBtn() {\n        if (this.state.isSendingBet) {\n            return <Button type=\"submit\" disabled><Spinner as=\"span\" animation=\"grow\" size=\"sm\" role=\"status\"\n                                                           aria-hidden=\"true\"/> Submitting bet...</Button>;\n        } else {\n            return <Button type=\"submit\">Submit bet</Button>;\n        }\n    }\n\n    public componentDidMount(): void {\n        this.props.web3.eth.getAccounts().then(\n            (res: string[]) => this.setState({\n                address: res[0],\n                isLoading: false\n            }),\n            (e: Error) => Alert.fire({\n                title: e.name,\n                text: e.message,\n                type: \"error\"\n            })\n        );\n    }\n\n    public render() {\n        if (this.props.match.sport_event_data === undefined) {\n            Alert.fire({\n                title: \"Error!\",\n                text: \"Sport data is undefined!\",\n                type: \"error\"\n            });\n            return;\n        }\n\n        if (this.state.isLoading) return <strong>Loading form...</strong>;\n\n        if (this.matchContainsPlayer(this.state.address)) return <div className=\"font-italic\">You are already part of\n            this match!</div>;\n\n        if (this.props.match.status_code !== MatchStatusCode.WaitingForMatchDate) {\n            return <div className=\"font-italic\">This matches is now closed for new participants!</div>;\n        }\n\n        return (\n            <Form onSubmit={(e: FormEvent<HTMLFormElement>) => this.onBetSubmit(e).catch((e: Error) => this.onBetSubmitFailed(e))}>\n                <Form.Group>\n                    <Form.Label>You can participate in this match by betting your own ether:</Form.Label>\n                    <Form.Control as=\"select\">\n                        <option value={0}>{this.props.match.sport_event_data.strHomeTeam + \" (Home team)\"}</option>\n                        <option value={1}>{this.props.match.sport_event_data.strAwayTeam + \" (Away team)\"}</option>\n                    </Form.Control><br/>\n                    <InputGroup>\n                        <InputGroup.Prepend>\n                            <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                        </InputGroup.Prepend>\n                        <Form.Control type=\"double\" placeholder=\"Enter bet value here...\" required pattern=\"(^-?[0-9.]+)\"/>\n                    </InputGroup>\n                    <br/>\n                    {this.renderSubmitBtn()}\n                </Form.Group>\n            </Form>\n        );\n\n    }\n\n}\n\nexport default MatchParticipateForm","import React, {Component} from \"react\";\nimport {IMatch, MatchStatusCode, MatchWinningTeam} from \"../../data/interfaces\";\nimport Button from \"react-bootstrap/Button\";\nimport * as database from \"../../data/database\";\nimport Alert from \"sweetalert2\";\n\ninterface IProps {\n    match: IMatch\n    refreshMatchFn: (m: IMatch) => void\n}\n\nclass MatchDebugOptions extends Component<IProps, any> {\n\n    private async makeTeamWin(team: MatchWinningTeam) {\n        this.props.match.winning_team = team;\n        this.props.match.status_code = MatchStatusCode.CanClaimRewards;\n        await database.updateMatch(this.props.match);\n        await Alert.fire({\n            title: \"Done!\",\n            text: MatchWinningTeam[team] + \" is now the winner!\",\n            type: \"success\"\n        });\n        this.props.refreshMatchFn(this.props.match);\n\n    }\n\n    public render() {\n        if (this.props.match.status_code === MatchStatusCode.WaitingForMatchDate) {\n            return (\n                <div>\n                    <strong>Debug options:</strong>\n                    <br/>\n                    <Button onClick={() => this.makeTeamWin(MatchWinningTeam.HomeTeam)}>Make home team win</Button>\n                    <Button onClick={() => this.makeTeamWin(MatchWinningTeam.AwayTeam)} style={{marginLeft: \"10px\"}}>Make away team win</Button>\n                    <Button onClick={() => this.makeTeamWin(MatchWinningTeam.All)} style={{marginLeft: \"10px\"}}>Make all teams win</Button>\n                </div>\n            );\n        }\n        return null;\n    }\n}\n\nexport default MatchDebugOptions;","import React, {Component} from \"react\";\nimport {IWeb3Prop} from \"../Routing\";\nimport Card from \"react-bootstrap/Card\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {IMatch, ISportEvent} from \"../../data/interfaces\";\nimport * as database from \"../../data/database\";\nimport * as sports from \"../../data/sports\";\nimport Alert from 'sweetalert2'\nimport LoadingCard from \"../Misc/LoadingCard\";\nimport MatchesList from \"./MatchesList\";\nimport MatchOverview from \"./MatchOverview\";\nimport * as web3utils from 'web3-utils';\n\nconst rouletteContractAbi = require(\"../../contracts/RouletteContract\");\n\nenum MatchesAreaSelection {\n    AvailableMatches,\n    MyMatches,\n    MatchOverview\n}\n\ninterface IState {\n    selectedArea: MatchesAreaSelection\n    matches: IMatch[],\n    isLoading: boolean\n    selectedMatch?: IMatch\n}\n\nclass MatchesArea extends Component<IWeb3Prop, IState> {\n    constructor(props: IWeb3Prop) {\n        super(props);\n        this.state = {\n            selectedArea: MatchesAreaSelection.AvailableMatches,\n            matches: [],\n            isLoading: true\n        };\n    }\n\n    /**\n     * Load all the active matches from database\n     * For each match, we will also get it's sport event id and load the sport data\n     */\n    private async getAllMatches(): Promise<void> {\n        let matches: IMatch[] = await database.getActiveMatches();\n        for (let i = 0; i < matches.length; i++) {\n            matches[i].sport_event_data = await sports.getEventFromId(matches[i].sport_event_id);\n        }\n\n        this.setState({\n            matches: matches,\n            isLoading: false\n        });\n    }\n\n    /**\n     * Loads the contract details of a specific match using it's contract address\n     * Once loaded, it will switch to the 'Match overview' tab on UI\n     * @param match: the IMatch object containing valid address\n     */\n    private async getMatchDetails(match: IMatch) {\n        // Display loading screen\n        this.setState({isLoading: true});\n\n        // Get current selected account in MetaMask\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance: any = new this.props.web3.eth.Contract(rouletteContractAbi.abi, match.contract_address);\n\n        // Get the needed data from the smart contract and store it in these fields\n        const homePlayersAddr: string[] = await contractInstance.methods.getHomeTeamPlayers().call({from: accounts[0]});\n        const awayPlayersAddr: string[] = await contractInstance.methods.getAwayTeamPlayers().call({from: accounts[0]});\n        const betValueWei: string = await contractInstance.methods.getTotalBetValue().call({from: accounts[0]});\n        const betValueEther: string = await web3utils.fromWei(web3utils.toBN(betValueWei));\n\n        let homePlayers: IContractPlayer[] = [];\n        let awayPlayers: IContractPlayer[] = [];\n\n        // The players array only contain their addressed, we wanna replace that with their profile names and bet value\n        for (let i = 0; i < homePlayersAddr.length; i++) {\n            homePlayers.push({\n                address: homePlayersAddr[i],\n                name: (await database.getPlayer(homePlayersAddr[i])).name,\n                betValue: await contractInstance.methods.getPlayerBet(homePlayersAddr[i]).call({from: accounts[0]})\n            });\n        }\n        for (let i = 0; i < awayPlayersAddr.length; i++) {\n            awayPlayers.push({\n                address: awayPlayersAddr[i],\n                name: (await database.getPlayer(awayPlayersAddr[i])).name,\n                betValue: await contractInstance.methods.getPlayerBet(awayPlayersAddr[i]).call({from: accounts[0]})\n            });\n        }\n\n        // The data will be stored in a object which will be assigned to the match object\n        const contractData: IContractData = {\n            playerCount: homePlayers.length + awayPlayers.length,\n            totalBetValue: betValueEther,\n            homeTeamPlayers: homePlayers,\n            awayTeamPlayers: awayPlayers\n        };\n\n        match.contract_data = contractData;\n\n        this.setState({\n            selectedMatch: match,\n            selectedArea: MatchesAreaSelection.MatchOverview,\n            isLoading: false\n        })\n    }\n\n    /**\n     * The default active tab behavior from the Nav elements is not suitable\n     * Every Nav Link needs to manually set it's classame correctly by calling this function\n     * If the area that the nav link component is linked to is the current selected area, then it will be active\n     * @param area: this is the area that the Nav Link is linked to\n     */\n    private getNavTabBsPrefix(area: MatchesAreaSelection): string {\n        if (area === this.state.selectedArea) {\n            return \"nav-link active\";\n        }\n        return \"nav-link\";\n    }\n\n    /**\n     * The 'Match overview' tab should only be rendered if a match is currently selected\n     */\n    private renderMatchOverviewTab() {\n        if (this.state.selectedMatch !== undefined) {\n            return (\n                <Nav.Item>\n                    <Nav.Link bsPrefix={this.getNavTabBsPrefix(MatchesAreaSelection.MatchOverview)}\n                              onClick={() => this.setState({selectedArea: MatchesAreaSelection.MatchOverview})}>\n                        Selected match\n                    </Nav.Link>\n                </Nav.Item>\n            );\n        }\n    }\n\n    /**\n     * Render the body of the main card.\n     * The content that it renders will depend on which area is currently chosen\n     * If 'isLoading' flag of state is true then a loading card will be shown instead\n     */\n    private renderCardBody() {\n        if (this.state.isLoading) {\n            return (\n                <Card.Body>\n                    <LoadingCard text={\"Loading data. Please wait.\"} show={true}/>\n                </Card.Body>\n            );\n        }\n\n        switch (this.state.selectedArea) {\n            case MatchesAreaSelection.AvailableMatches:\n                return <MatchesList matches={this.state.matches}\n                                    onMatchSelectCallbackFn={(m: IMatch) => this.getMatchDetails(m)}/>;\n            case MatchesAreaSelection.MyMatches:\n                return <strong>Page not yet implemented</strong>;\n            case MatchesAreaSelection.MatchOverview:\n                if (this.state.selectedMatch === undefined) break;\n                return <MatchOverview match={this.state.selectedMatch} web3={this.props.web3} refreshMatchFn={(m: IMatch) => this.getMatchDetails(m)}/>\n        }\n    }\n\n    public componentDidMount(): void {\n        this.getAllMatches().catch(\n            (e: Error) => Alert.fire({\n                title: e.name,\n                text: e.message,\n                type: \"error\"\n            })\n        );\n    }\n\n    public render() {\n        return (\n            <div>\n                <h1>Matches</h1>\n                <hr/>\n                <p>On this page, you can view all the current available betting matches that have been created by other\n                    players!\n                    <br/>When browsing through the list, you can view more details of a match along with options such as\n                    the ability to participate in it by placing your own bet as well!\n                </p>\n                <Card>\n                    <Card.Header>\n                        <div className=\"match-nav-items\">\n                            <Nav variant=\"tabs\">\n                                <Nav.Item>\n                                    <Nav.Link bsPrefix={this.getNavTabBsPrefix(MatchesAreaSelection.AvailableMatches)}\n                                              onClick={() => this.setState({selectedArea: MatchesAreaSelection.AvailableMatches})}>\n                                        Current Betting Matches\n                                    </Nav.Link>\n                                </Nav.Item>\n                                <Nav.Item>\n                                    <Nav.Link bsPrefix={this.getNavTabBsPrefix(MatchesAreaSelection.MyMatches)}\n                                              onClick={() => this.setState({selectedArea: MatchesAreaSelection.MyMatches})}>\n                                        My matches\n                                    </Nav.Link>\n                                </Nav.Item>\n                                {this.renderMatchOverviewTab()}\n                            </Nav>\n                        </div>\n                    </Card.Header>\n                    {this.renderCardBody()}\n                </Card>\n            </div>\n        );\n    }\n}\n\nexport default MatchesArea;","import React, {Component} from \"react\";\nimport {IMatch, MatchStatusCode} from \"../../data/interfaces\";\nimport Card from \"react-bootstrap/Card\";\nimport ErrorCard from \"../Misc/ErrorCard\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Table from \"react-bootstrap/Table\";\nimport * as web3utils from 'web3-utils';\nimport Web3 from \"web3\";\nimport MatchParticipateForm from \"./MatchParticipateForm\";\nimport MatchDebugOptions from \"./MatchDebugOptions\";\nimport MatchClaimReward from \"./MatchClaimReward\";\n\ninterface IProps {\n    match: IMatch,\n    web3: Web3\n    refreshMatchFn: (m: IMatch) => void\n}\n\nclass MatchOverview extends Component<IProps, any> {\n\n    private renderPlayerTable(caption: string, players: IContractPlayer[]) {\n        let rows = players.map((player: IContractPlayer) => (\n            <tr>\n                <td>{player.name}</td>\n                <td>{web3utils.fromWei(player.betValue.toString()) + \" Ether\"}</td>\n            </tr>\n        ));\n\n        return (\n            <Table>\n                <caption>{caption}</caption>\n                <thead>\n                <tr>\n                    <th>Player Name</th>\n                    <th>Bet value</th>\n                </tr>\n                </thead>\n                <tbody>\n                {rows}\n                </tbody>\n            </Table>\n        );\n    }\n\n    private renderUserOptions() {\n        switch (this.props.match.status_code) {\n            case MatchStatusCode.WaitingForMatchDate:\n                return <MatchParticipateForm match={this.props.match} web3={this.props.web3} refreshMatchFn={this.props.refreshMatchFn}/>;\n            case MatchStatusCode.CanClaimRewards:\n                return <MatchClaimReward web3={this.props.web3} match={this.props.match} refreshMatchFn={this.props.refreshMatchFn}/>\n            default:\n                return <MatchParticipateForm match={this.props.match} web3={this.props.web3} refreshMatchFn={this.props.refreshMatchFn}/>;\n        }\n    }\n\n    public render() {\n\n        if (this.props.match.sport_event_data === undefined || this.props.match.contract_data === undefined) {\n            return <ErrorCard title=\"Failed to load match!\"\n                              msg={\"An unknown error occured that led to match data being incomplete\"} show={true}/>;\n        }\n\n        return (\n            <Card.Body>\n                <h3>{this.props.match.title}</h3>\n                <p>Here you can see additional details of this betting match along with options to participate if\n                    possible</p>\n                <Row>\n                    <Col>\n                        <Card>\n                            <Card.Body>\n                                <strong>Created on: </strong>{this.props.match.start_date}<br/>\n                                <strong>Sport event: </strong>{this.props.match.sport_event_data.strEvent}<br/>\n                                <strong>End\n                                    date: </strong>{this.props.match.sport_event_data.dateEvent + \" \" + this.props.match.sport_event_data.strTime}\n                            </Card.Body>\n                        </Card>\n                        <br/>\n                        {this.renderPlayerTable(this.props.match.sport_event_data.strHomeTeam, this.props.match.contract_data.homeTeamPlayers)}\n                    </Col>\n                    <Col>\n                        <Card>\n                            <Card.Body>\n                                <strong>Total players: </strong>{this.props.match.contract_data.playerCount}<br/>\n                                <strong>Total bet value: </strong>{this.props.match.contract_data.totalBetValue}<br/>\n                                <strong>Status: </strong>{MatchStatusCode[this.props.match.status_code]}\n                            </Card.Body>\n                        </Card>\n                        <br/>\n                        {this.renderPlayerTable(this.props.match.sport_event_data.strAwayTeam, this.props.match.contract_data.awayTeamPlayers)}\n                    </Col>\n                </Row>\n                <hr/>\n                {this.renderUserOptions()}\n                <hr/>\n                <MatchDebugOptions match={this.props.match} refreshMatchFn={this.props.refreshMatchFn} />\n            </Card.Body>\n        );\n    }\n}\n\nexport default MatchOverview;","import React, {Component, ReactNode} from 'react';\nimport '../css/App.css';\nimport SiteNavbar from \"./SiteNavbar\";\nimport Web3 from \"web3\";\nimport Routing from \"./Routing\";\nimport {BrowserRouter} from \"react-router-dom\";\nimport * as database from \"../data/database\";\nimport RegisterComponent from \"./RegisterComponent\";\nimport {IPlayer} from \"../data/interfaces\";\n\nenum LoadingState {\n    detectProvider,\n    noProvider,\n    awaitProviderAuth,\n    providerAuthFailed,\n    notRegistered,\n    loaded,\n    failed\n}\n\ninterface IState {\n    loadingState: LoadingState,\n    errorMsg: string\n    web3?: Web3,\n    accounts: string[],\n    player?: IPlayer\n}\n\nclass App extends Component<any, IState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            loadingState: LoadingState.detectProvider,\n            errorMsg: \"N/A\",\n            web3: undefined,\n            accounts: [],\n        };\n    }\n\n    public componentDidMount(): void {\n        this.init().catch(this.onInitFailed);\n\n    }\n\n    private onInitFailed(error: Error): void {\n        console.log(error);\n        this.setState({\n            loadingState: LoadingState.failed,\n            errorMsg: error.message\n        });\n\n    }\n\n    private async init(): Promise<void> {\n        let web3Provider: Web3;\n\n        // Check if a provider like MetaMask is active\n        if (window.web3 === undefined && window.ethereum === undefined) {\n            this.setState({loadingState: LoadingState.noProvider});\n            return;\n        } else {\n            web3Provider = new Web3(window.web3.currentProvider);\n            web3Provider.eth.transactionConfirmationBlocks = 1;\n            this.setState({\n                loadingState: LoadingState.awaitProviderAuth,\n                web3: web3Provider\n            });\n        }\n\n        // Get MetaMask Account\n        this.setState({loadingState: LoadingState.awaitProviderAuth});\n        window.ethereum.enable();\n        let accounts: string[] = await web3Provider.eth.getAccounts();\n        if (accounts.length === 0) {\n            this.setState({loadingState: LoadingState.providerAuthFailed});\n            return;\n        }\n\n        // Check if user is registered with us\n        let userIsRegistered: boolean = await database.checkIfUserIsRegistered(accounts[0]);\n        if (!userIsRegistered) {\n            this.setState({\n                loadingState: LoadingState.notRegistered,\n                accounts: accounts\n            });\n            return;\n        }\n\n        const player: IPlayer = await database.getPlayer(accounts[0]);\n        this.setState({\n            loadingState: LoadingState.loaded,\n            player: player\n        });\n    }\n\n    private onRegistered(): void {\n        this.setState({loadingState: LoadingState.loaded});\n        database.getPlayer(this.state.accounts[0]).then(\n            (player: IPlayer) => this.setState({player: player, loadingState: LoadingState.loaded})\n        );\n    }\n\n    public render(): ReactNode {\n        switch (this.state.loadingState) {\n            case LoadingState.detectProvider:\n                return <strong>Detecting Web3 provider...</strong>;\n            case LoadingState.noProvider:\n                return <strong>No web3 provider found!</strong>;\n            case LoadingState.awaitProviderAuth:\n                return <strong>Awaiting permission from MetaMask</strong>;\n            case LoadingState.providerAuthFailed:\n                return <strong>You are not logged in MetaMask!</strong>;\n            case LoadingState.notRegistered:\n                return (\n                    <BrowserRouter>\n                        <SiteNavbar showContent={false}/>\n                        <br/>\n                        <RegisterComponent accounts={this.state.accounts}\n                                           onRegisteredCallback={() => this.onRegistered()}/>\n                    </BrowserRouter>\n                );\n            case LoadingState.loaded:\n                return (\n                    <BrowserRouter basename={process.env.PUBLIC_URL}>\n                        <SiteNavbar showContent={true} player={this.state.player}/>\n                        <br/>\n                        <Routing web3={this.state.web3 as Web3} player={this.state.player as IPlayer}/>\n                    </BrowserRouter>\n                );\n            default:\n                return <strong>An undefined error occured! State: {this.state.loadingState}</strong>\n        }\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport MainArea from \"./MainArea\";\nimport {Route, Switch} from \"react-router-dom\";\nimport Web3 from \"web3\";\nimport ProfileAreaComponent from \"./Profile/ProfileAreaComponent\";\nimport LeaderboardArea from \"./LeaderboardArea\";\nimport {IPlayer} from \"../data/interfaces\";\nimport MatchCreateArea from \"./MatchCreate/MatchCreateArea\";\nimport MatchesArea from \"./Matches/MatchesArea\";\n\ninterface IProps {\n    web3: Web3,\n    player: IPlayer\n}\n\nexport interface IWeb3Prop {\n    web3: Web3\n}\n\nclass Routing extends Component<IProps, any> {\n    public render(): any {\n        return (\n            <div className=\"page-content\">\n                <Switch>\n                    <Route exact path=\"/\" render={() => <MainArea web3={this.props.web3} />}/>\n                    <Route path=\"/matches\" render={() => <MatchesArea web3={this.props.web3} />}/>\n                    <Route path=\"/create\" render={() => <MatchCreateArea web3={this.props.web3}/>}/>\n                    <Route path=\"/profile\" render={() => <ProfileAreaComponent web3={this.props.web3}/>}/>\n                    <Route path=\"/leaderboard\" render={() => <LeaderboardArea/>}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Routing;","import React, {Component, FormEvent} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport * as database from \"../data/database\";\nimport {IPlayer} from \"../data/interfaces\";\nimport Alert from 'sweetalert2'\n\ninterface IState {\n    showInfo: boolean\n}\n\ninterface IProps {\n    accounts: string[],\n    onRegisteredCallback: () => void\n}\n\nclass RegisterComponent extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            showInfo: true\n        };\n\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n    }\n\n    /**\n     * Called when the user submits the registration form\n     * It will handle the input and create a new player record in the backend database\n     * @param event: FormEvent that is created by the HTML onClick\n     */\n    private onFormSubmit(event: FormEvent<HTMLFormElement>): void {\n        // Stop default behavior\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Get the input from form\n        const form: EventTarget = event.target;\n        const inputName: string = form[0].value;\n        const inputPassword: string = form[1].value;\n        const inputPasswordRepeat: string = form[2].value;\n\n        // Check if user repeated the password correctly\n        if (inputPassword !== inputPasswordRepeat) {\n            Alert.fire({\n                title: \"Invalid password!\",\n                text: \"The passwords that you entered do not match!\",\n                type: 'error',\n                confirmButtonText: 'Ok'\n            });\n            return;\n        }\n\n        // Register the new user\n        const player: IPlayer = {\n            address: this.props.accounts[0],\n            name: inputName,\n            wins: 0,\n            losses: 0,\n            earnings: 0\n        };\n        database.registerPlayer(player).then(\n            () => {\n                Alert.fire({\n                    title: 'Success!',\n                    text: \"Your account has been successfully created!\",\n                    type: 'success',\n                    confirmButtonText: 'Ok'\n                }).then(() => {\n                    this.props.onRegisteredCallback();\n                })\n\n            },\n            (e: Error) => {\n                Alert.fire({\n                    title: e.name,\n                    text: e.message,\n                    type: 'error',\n                    confirmButtonText: 'Ok'\n                });\n                console.log(e);\n            }\n        );\n    }\n\n\n    /**\n     * This will render the information portion of the registratrion phase\n     * It will show some info to the user about making an account\n     */\n    private renderInfo() {\n        return (<div className=\"register-form\">\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Welcome!</Card.Title>\n                        <p>\n                            The current ethereum account that you have selected in MetaMask is not associated with an\n                            Easybet profile.\n                            In order to use this website, you must create a Easybet profile that consist of a profile\n                            name and password\n                        </p>\n                        <strong>This profile account is needed for the following:</strong><br/>\n                        <ul>\n                            <li>Create and view betting matches</li>\n                            <li>Participate in other matches</li>\n                            <li>View the online leaderboard</li>\n                        </ul>\n                        <br/>\n                        <strong>Please keep in mind that the following information will be visible to other players\n                            through the leaderboards:</strong>\n                        <ul>\n                            <li>The amount of ether that you have won in total through matches</li>\n                            <li>The amount of lost bets</li>\n                            <li>The amount of won bets</li>\n                        </ul>\n                        <br/>\n                        <p>If you agree to the above, please click 'Continue'</p>\n                        <Button onClick={() => this.setState({showInfo: false})}>Continue</Button>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n\n    /**\n     * Display the registration form. This is displayed after the user has clicked continue in the info portion\n     */\n    private renderForm() {\n        return (\n            <div className=\"register-form\">\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Registration</Card.Title>\n                        <p>Please fill in the following form in order to register!</p>\n                        <strong>Your address: </strong>{this.props.accounts[0]}\n                        <br/><br/>\n                        <Form onSubmit={this.onFormSubmit}>\n                            <Form.Group>\n                                <Form.Label>Profile name</Form.Label>\n                                <Form.Control placeholder=\"Enter profile name here...\"/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Enter password here...\"/>\n                            </Form.Group>\n                            <Form.Group>\n                                <Form.Label>Repeat your password here</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Repeat your password here...\"/>\n                            </Form.Group>\n                            <ButtonGroup>\n                                <Button onClick={() => this.setState({showInfo: true})}>Go back</Button>\n                                <Button type=\"submit\">Register</Button>\n                            </ButtonGroup>\n                        </Form>\n                    </Card.Body>\n                </Card>\n            </div>\n        );\n    }\n\n    public render() {\n        if (this.state.showInfo) {\n            return this.renderInfo()\n        } else {\n            return this.renderForm();\n        }\n    }\n}\n\nexport default RegisterComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}