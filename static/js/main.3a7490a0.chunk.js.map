{"version":3,"sources":["components/SiteNavbar.tsx","components/MainArea.tsx","database.ts","components/MatchOverview.tsx","components/MatchCreateArea.tsx","components/LoadingCard.tsx","components/ErrorCard.tsx","components/App.tsx","components/MatchesArea.tsx","components/Routing.tsx","serviceWorker.ts","index.tsx"],"names":["SiteNavbar","react_default","a","createElement","Navbar_default","variant","expand","Brand","as","Link","to","src","width","height","alt","Toggle","aria-controls","Collapse","id","Nav_default","className","Component","MainArea","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","account","_this2","web3","eth","getAccounts","then","accounts","setState","API_URL","createMatchEntry","_x","_createMatchEntry","apply","arguments","_callee","match","response","regenerator_default","wrap","_context","prev","next","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","sent","ok","Error","concat","status","stop","_callee2","_context2","json","abrupt","deleteMatch","_x2","_deleteMatch","_callee3","_context3","toString","LoadingState","abi","require","MatchCreateArea","isCreating","event","form","target","preventDefault","stopPropagation","wei","web3utils","value","title","createMatch","console","log","reason","alert","contract","Contract","tx","deploy","data","bytecode","send","from","contractInstance","contract_address","options","address","start_date","end_date","database","Spinner_default","animation","size","role","aria-hidden","_this3","Card_default","Body","Title","Form_default","onSubmit","e","Group","Label","Control","type","placeholder","required","InputGroup_default","Prepend","Text","Button_default","disabled","createLoadingSpinner","LoadingCard","show","text","ErrorCard","msg","rouletteContractAbi","MatchOverview","loadingState","Loading","errorMessage","totalBetValue","players","undefined","isSendingBet","disableFormSubmit","sendBetResultMsg","getMatchDetails","catch","methods","getPlayers","getTotalBetValue","betValueWei","betValueEther","Loaded","prevProps","prevState","snapshot","componentDidMount","betValue","addPlayer","error","name","message","win","loadingElement","includes","onBetSubmit","ex","onBetSubmitFail","components_LoadingCard","components_ErrorCard","Failed","showMainComponent","Header","length","displayForm","onClick","makeMeWinner","MatchesArea","matches","selectedMatch","displayMatchDetails","_getMatches","components_MatchOverview","Row_default","Col_default","md","map","onMatchSelected","Routing","react_router","exact","path","render","components_MainArea","components_MatchesArea","components_MatchCreateArea","App","detectProvider","web3Provider","window","ethereum","Web3","currentProvider","transactionConfirmationBlocks","awaitAuth","enable","noAuth","loaded","noProvider","react_router_dom","components_SiteNavbar","components_Routing","Boolean","location","hostname","ReactDOM","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3a7490a0.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport Navbar from \"react-bootstrap/Navbar\";\nimport Nav from \"react-bootstrap/Nav\";\nimport {Link} from \"react-router-dom\";\n\nclass SiteNavbar extends Component {\n    public render(): any {\n        return (\n            <Navbar variant=\"dark\" expand=\"lg\">\n                <Navbar.Brand as={Link} to=\"/\"><img src=\"https://yt3.ggpht.com/a/AGF-l7-BuJETOnFhNI2w3WJF163XAa1e13BtRP6znQ=s900-mo-c-c0xffffffff-rj-k-no\" width=\"30\" height=\"30\" alt= \"Logo brand\"/>  EasyBet</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\n                        <Nav.Link as={Link} to=\"/matches\">Matches</Nav.Link>\n                        <Nav.Link as={Link} to=\"/create\">Create Match</Nav.Link>\n                    </Nav>\n                </Navbar.Collapse>\n            </Navbar>\n        );\n    }\n}\n\nexport default SiteNavbar;","import React, {Component} from \"react\";\nimport Web3 from \"web3\"\n\ninterface IState {\n    account: string\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MainArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            account: \"Loading...\"\n        }\n    }\n\n\n    public componentDidMount(): void {\n        this.props.web3.eth.getAccounts().then((accounts: string[]) => {\n            this.setState({account: accounts[0]})\n        });\n    }\n\n\n    public render(): React.ReactNode {\n        return (\n            <div>\n                <h1><img src=\"https://www.pix123.com/racingbase-au//201812/Dec11/20181211121538_205.PNG\" width=\"800\" height=\"300\" alt= \"Logo brand\"/></h1>\n                <hr/>\n                <p>Welcome to EasyBet. This site is used to participate in betting matches with Ether as\n                    currency.\n                </p>\n                <strong>Current wallet address: </strong>{this.state.account}\n            </div>\n        );\n\n    }\n}\n\nexport default MainArea;","const API_URL = \"http://80.211.116.56:8000/api\";\n\n// Defines a match object\nexport interface IMatch {\n    id?: number\n    title: string,\n    contract_address: string,\n    start_date: string,\n    end_date: string\n}\n\n\n/**\n * Create a new match row in the backend database\n * @param match: the match object of type 'IMatch' that will be sent to db\n */\nexport async function createMatchEntry(match: IMatch): Promise<void> {\n    let response = await fetch(API_URL + \"/matches/create\", {\n        method: \"POST\",\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(match)\n    });\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status});`);\n    }\n}\n\n/**\n * Get all the matches that exist in the backend database\n * @returns an IMatch[] array containing the match objects\n */\nexport async function getMatches(): Promise<IMatch[]> {\n    let response: Response = await fetch(API_URL + \"/matches/\");\n\n    if (!response.ok) {\n        throw Error(`Failed to retrieve match data! (${response.status})`);\n    }\n\n    return await response.json();\n}\n\n\n/**\n * Delete a specific match using the ID parameter\n * @param id: the id of the specific match that we want to delete\n */\nexport async function deleteMatch(id: number): Promise<void> {\n    let response = await fetch(API_URL + \"/matches/\" + id.toString(), {method: \"DELETE\"});\n\n    if (!response.ok) {\n        throw Error(`Failed to delete match with ID ${id}! (${response.status})`)\n    }\n}","import React, {Component, FormEvent} from \"react\";\nimport LoadingCard from \"./LoadingCard\";\nimport * as database from \"../database\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport * as web3utils from 'web3-utils';\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Spinner from \"react-bootstrap/Spinner\";\nimport Contract from \"web3/eth/contract\";\nimport Web3 from \"web3\"\nimport ErrorCard from \"./ErrorCard\";\n\nconst rouletteContractAbi = require(\"../contracts/RouletteContract\");\n\nenum LoadingState {\n    Loading,\n    Loaded,\n    Failed\n}\n\ninterface IState {\n    loadingState: LoadingState,\n    errorMessage: string\n    totalBetValue: string,\n    players: string[],\n    contract?: Contract,\n    account: string,\n    isSendingBet: boolean,\n    disableFormSubmit: boolean,\n    sendBetResultMsg: string\n}\n\ninterface IProps {\n    web3: Web3,\n    match: database.IMatch\n}\n\nclass MatchOverview extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            loadingState: LoadingState.Loading,\n            errorMessage: \"N/A\",\n            totalBetValue: \"\",\n            players: [],\n            contract: undefined,\n            account: \"\",\n            isSendingBet: false,\n            disableFormSubmit: false,\n            sendBetResultMsg: \"\"\n        }\n    }\n\n    public componentDidMount(): void {\n        console.log(\"Address: \" + this.props.match.contract_address);\n        // noinspection JSIgnoredPromiseFromCall\n        this.getMatchDetails().catch(\n            (reason: string) => {\n                console.log(reason);\n            }\n        );\n\n    }\n\n    /**\n     * Get the match details by retrieving data from the relevant contract instance\n     */\n    private async getMatchDetails(): Promise<void> {\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n\n        // Get the specific contract instance that belongs to this match using its address\n        const contractInstance: any = new this.props.web3.eth.Contract(rouletteContractAbi.abi, this.props.match.contract_address);\n\n        let players: string[] = await contractInstance.methods.getPlayers().call({from: accounts[0]});\n        let betValueWei: string = await contractInstance.methods.getTotalBetValue().call({from: accounts[0]});\n        let betValueEther: string = await web3utils.fromWei(web3utils.toBN(betValueWei));\n\n        await this.setState({\n            players: players,\n            totalBetValue: `${betValueEther} Ether`,\n            contract: contractInstance,\n            account: accounts[0],\n            loadingState: LoadingState.Loaded\n        });\n\n    }\n\n    public componentDidUpdate(prevProps: IProps, prevState: IState, snapshot: any): void {\n        /**\n         * componentDidMount is apparently not called again when user chooses a new match in MatchesArea.\n         * So we have to manually check each component update and call componentDidMount to load new match details.\n         */\n        if (prevProps.match.id !== this.props.match.id) {\n            this.setState({loadingState: LoadingState.Loading}); // Display loading screen again!\n            this.componentDidMount();\n        }\n    }\n\n    /**\n     * Called when user clicks on the Submit button\n     * This will submit the entered bet amount\n     * @param event: Form submit event containing the form and input\n     */\n    private async onBetSubmit(event: FormEvent<HTMLFormElement>): Promise<void> {\n        const form: EventTarget = event.target;\n\n        // Prevent default behavior\n        event.preventDefault();\n        event.stopPropagation();\n\n        if (this.state.contract === undefined) return;\n\n        // Prevent user from submitting again\n        this.setState({\n            isSendingBet: true,\n            disableFormSubmit: true\n        });\n\n        // The bet value that was entered in the form\n        const betValue: string = form[0].value;\n        const wei: string = web3utils.toWei(betValue);\n\n        // Get the addPlayer method and send a transaction to it\n        let method = this.state.contract.methods.addPlayer();\n        await method.send({\n            from: this.state.account,\n            value: wei.toString()\n        });\n\n        // Reset form and reload match details\n        this.setState({\n            isSendingBet: false,\n            disableFormSubmit: false\n        });\n        this.componentDidMount();\n\n        alert(\"Bet has been placed!\");\n    }\n\n    /**\n     * This method is called when the onSubmitBet method throws an error\n     * It will log the error to console and update the state in order to display UI feedback\n     * @param error: the error object containing details about the error\n     */\n    private async onBetSubmitFail(error: Error): Promise<void> {\n        console.log(error);\n        this.setState({\n            sendBetResultMsg: `${error.name}: ${error.message}`,\n            disableFormSubmit: true,\n            isSendingBet: false\n        });\n    }\n\n\n    /**\n     * Make the currently logged in user win the match\n     * This will call 'win()' on the smart contract\n     */\n    private async makeMeWinner(): Promise<void> {\n        if (this.state.contract === undefined) return;\n        let method = this.state.contract.methods.win();\n        await method.send({from: this.state.account});\n        await database.deleteMatch(this.props.match.id as number);\n\n    }\n\n    /**\n     * Display the betting form if we meet the requirements\n     */\n    private displayForm(): null | any {\n        // Don't display anything if we don't have the required info\n        if (this.state.account === null || this.state.players === null) return null;\n\n        // If account address is already in players array, then account cannot bet!\n        if (this.state.players.includes(this.state.account)) {\n            return <div className=\"font-italic\">You are already part of this match!</div>\n        } else {\n            // If we are currently sending a bet, then the button will have a loading spinner\n            let loadingElement;\n            if (this.state.isSendingBet) {\n                loadingElement = <Spinner as=\"span\" animation=\"border\" size=\"sm\" role=\"status\" aria-hidden=\"true\"/>\n            }\n\n            return (\n                <Form onSubmit={(e: FormEvent<HTMLFormElement>) => this.onBetSubmit(e).catch((ex: Error) => this.onBetSubmitFail(ex))}>\n                    <Form.Group>\n                        <Form.Label>You can participate in this match by betting your own ether:</Form.Label>\n                        <InputGroup>\n                            <InputGroup.Prepend>\n                                <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                            </InputGroup.Prepend>\n                            <Form.Control type=\"number\" placeholder=\"Enter bet value here...\" required/>\n                        </InputGroup>\n                        <br/>\n                        <Button type=\"submit\" disabled={this.state.disableFormSubmit}>{loadingElement}Submit\n                            bet!</Button>\n                        <p>{this.state.sendBetResultMsg}</p>\n                    </Form.Group>\n                </Form>\n            );\n        }\n    }\n\n    public render(): any {\n        return (\n            <div>\n                <LoadingCard text=\"Loading match data...\" show={this.state.loadingState === LoadingState.Loading}/>\n                <ErrorCard title={\"Failed loading match data!\"} msg={this.state.errorMessage}\n                           show={this.state.loadingState === LoadingState.Failed}/>\n                {this.showMainComponent()}\n            </div>\n        );\n    }\n\n    private showMainComponent() {\n        if (this.state.loadingState === LoadingState.Loaded) {\n            return (\n                <Card>\n                    <Card.Header>Match details</Card.Header>\n                    <Card.Body>\n                        <p>Here in the match overview, you can see additionel details like the amount of players, the\n                            total\n                            bet value and options for you to place your own bet!</p>\n                        <br/><h3>{this.props.match.title}</h3>\n                        <strong>Amount of players: </strong>{this.state.players.length}<br/>\n                        <strong>Total Bet Amount: </strong>{this.state.totalBetValue}<br/>\n                        <strong>Started on: </strong>{this.props.match.start_date}\n                        <hr/>\n                        {this.displayForm()}\n                        <hr/>\n                        <strong>Debug options:</strong><br/>\n                        <Button onClick={() => this.makeMeWinner()}>Make me winner!</Button>\n                    </Card.Body>\n                </Card>\n            );\n        }\n    }\n}\n\nexport default MatchOverview;","import React, {Component, FormEvent} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Button from \"react-bootstrap/Button\";\nimport Web3 from \"web3\";\nimport * as web3utils from 'web3-utils';\nimport * as database from \"../database\";\nimport BN from \"bn.js\";\nimport Contract from \"web3/eth/contract\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\nconst abi: any = require(\"../contracts/RouletteContract\");\n\ninterface IState {\n    isCreating: boolean\n}\n\ninterface IProps {\n    web3: Web3\n}\n\nclass MatchCreateArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            isCreating: false\n        }\n    }\n\n    /**\n     *   This method is run when user clicks on 'Create' button\n     *   This will handle form input and create a new match\n     *   @param event: The html form event\n     */\n    private onSubmit(event: FormEvent<HTMLFormElement>): void {\n        const form: EventTarget = event.target;\n        event.preventDefault();\n        event.stopPropagation();\n\n        // Make sure the button is disabled and showing loading icon\n        this.setState({isCreating: true});\n\n\n        // Get the ether that the user inputted and convert to wei\n        const wei: BN = web3utils.toWei(form[1].value);\n        const title: string = form[0].value;\n\n        this.createMatch(title, wei).then(\n            () => console.log(\"Match has been created!\"),\n            (reason: string) => {\n                alert(reason);\n                this.setState({isCreating: false});\n            }\n        )\n    }\n\n    /**\n     *  This will use the form input to create a new match\n     *  First it will get the current account that is logged in and from there it will create a new smart contract    \n     *  Details of the contract will also be saved to database\n     *  @param title: The name of the match. Will be saved to db\n     *  @param wei: The amount of ether in 'wei' format\n     */\n    private async createMatch(title: string, wei: BN): Promise<void> {\n\n        // Get the user accounts that are available in MetaMask\n        const accounts: string[] = await this.props.web3.eth.getAccounts();\n        // Create the contract object that we will use to deploy and interact with the contract\n        const contract = new this.props.web3.eth.Contract(abi.abi);\n\n        // Deploy a new instance of the contract and send a transaction to it containing the bet value\n        // The new instance will be stored in contractInstance\n        let tx: any = contract.deploy({data: abi.bytecode, arguments: []});\n        let contractInstance: Contract = await tx.send({\n            from: accounts[0], // Account of the sender\n            value: wei.toString() // The bet value in wei\n        });\n\n        // Create a new match entry in the database\n        let match: database.IMatch = {\n            title: title,\n            contract_address: contractInstance.options.address,\n            start_date: \"2019-05-05\",\n            end_date: \"2019-05-05\"\n        };\n        await database.createMatchEntry(match);\n        this.setState({isCreating: false});\n        alert(\"Match has been created!\");\n\n    }\n\n    private createLoadingSpinner() {\n        if (this.state.isCreating) {\n            return (\n                <Spinner\n                    as=\"span\"\n                    animation=\"border\"\n                    size=\"sm\"\n                    role=\"status\"\n                    aria-hidden=\"true\"\n                />\n            );\n        }\n        return null;\n    }\n\n    public render(): React.ReactNode {\n        return <div>\n            <h1>Match creation</h1>\n            <hr/>\n            <p>On this page, you can create a new betting match that other players can participate in!\n            </p>\n            <Card>\n                <Card.Body>\n                    <Card.Title>Enter new match details</Card.Title>\n                    <Form onSubmit={(e: FormEvent<HTMLFormElement>) => this.onSubmit(e)}>\n                        <Form.Group>\n                            <Form.Label>Match Title:</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Enter match title here...\" required/>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Your bet</Form.Label>\n                            <InputGroup>\n                                <InputGroup.Prepend>\n                                    <InputGroup.Text id=\"inputGroupPrepend\">ETH</InputGroup.Text>\n                                </InputGroup.Prepend>\n                                <Form.Control type=\"number\" placeholder=\"Enter bet value here...\" required/>\n                            </InputGroup>\n                        </Form.Group>\n                        <p>Once you have created the match, other users will be able to see it and even participate\n                            in it with their own ether!</p>\n                        <Button type=\"submit\" disabled={this.state.isCreating}>{this.createLoadingSpinner()} Create</Button>\n                    </Form>\n                </Card.Body>\n            </Card>\n        </div>;\n    }\n}\n\nexport default MatchCreateArea;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport Spinner from \"react-bootstrap/Spinner\";\n\ninterface IProps {\n    text: string,\n    show: boolean\n}\n\nclass LoadingCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Spinner animation=\"border\" variant=\"primary\" text/>\n                            <br/><br/>\n                            <Card.Title><strong>{this.props.text}</strong></Card.Title>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default LoadingCard;","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\n\ninterface IProps {\n    title: string,\n    msg: string\n    show: boolean\n}\n\nclass ErrorCard extends Component<IProps, any> {\n\n    public render(): React.ReactNode {\n        if (this.props.show) {\n            return (\n                <Card className=\"text-center\">\n                    <Card.Body>\n                        <div className=\"align-content-center\">\n                            <Card.Title><strong>{this.props.title}</strong></Card.Title>\n                            <br/><br/>\n                            <strong>{this.props.msg}</strong>\n                        </div>\n                    </Card.Body>\n                </Card>\n            );\n        } else {\n            return (null);\n        }\n    }\n}\n\nexport default ErrorCard;","import React, {Component, ReactNode} from 'react';\nimport '../css/App.css';\nimport SiteNavbar from \"./SiteNavbar\";\nimport Web3 from \"web3\";\nimport Routing from \"./Routing\";\nimport {HashRouter} from \"react-router-dom\";\n\nenum LoadingState {\n    detectProvider,\n    noProvider,\n    awaitAuth,\n    noAuth,\n    loaded\n}\n\ninterface IState {\n    loadingState: LoadingState,\n    web3?: Web3\n}\n\nclass App extends Component<any,IState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            loadingState: LoadingState.detectProvider,\n            web3: undefined\n        };\n    }\n\n    public componentDidMount(): void {\n        let web3Provider: Web3;\n\n        // Check if a provider like MetaMask is active\n        if (window.web3 === undefined && window.ethereum === undefined) {\n            this.setState({loadingState: LoadingState.noProvider});\n            return;\n        } else {\n            web3Provider = new Web3(window.web3.currentProvider);\n            web3Provider.eth.transactionConfirmationBlocks = 1;\n            this.setState({\n                loadingState: LoadingState.awaitAuth,\n                web3: web3Provider\n            });\n        }\n\n        // Get Account\n        this.setState({loadingState: LoadingState.awaitAuth});\n        window.ethereum.enable();\n        web3Provider.eth.getAccounts().then((accounts: string[]) => {\n            console.log(accounts);\n            if (accounts.length === 0) {\n                this.setState({loadingState: LoadingState.noAuth});\n            } else {\n                this.setState({loadingState: LoadingState.loaded});\n            }\n        }).catch((reason: string) => {\n            console.log(reason);\n        });\n\n    }\n    \n    public render(): ReactNode {\n        switch (this.state.loadingState) {\n            case LoadingState.detectProvider:\n                return <strong>Detecting Web3 provider...</strong>;\n            case LoadingState.noProvider:\n                return <strong>No web3 provider found!</strong>;\n            case LoadingState.awaitAuth:\n                return <strong>Awaiting permission from MetaMask</strong>;\n            case LoadingState.noAuth:\n                return <strong>You are not logged in MetaMask!</strong>;\n            case LoadingState.loaded:\n                return (\n                    <HashRouter>\n                        <SiteNavbar/>\n                        <br/>\n                        <Routing web3={this.state.web3 as Web3}/>\n                    </HashRouter>\n                );\n            default:\n                return <strong>An undefined error occured! State: {this.state.loadingState}</strong>\n        }\n    }\n}\n\nexport default App;\n","import React, {Component} from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport * as database from \"../database\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Button from \"react-bootstrap/Button\";\nimport MatchOverview from \"./MatchOverview\";\nimport Web3 from \"web3\"\n\n// Define properties of the component Props\ninterface IProps {\n    web3: Web3\n}\n\n// Define the properties of the component State\ninterface IState {\n    matches: database.IMatch[],\n    selectedMatch?: database.IMatch,\n    displayMatchDetails: boolean\n}\n\nclass MatchesArea extends Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            matches: [],\n            selectedMatch: undefined,\n            displayMatchDetails: false\n        };\n    }\n    \n    public componentDidMount(): void {\n        // Get the matches from database\n        database.getMatches().then(\n            (matches: database.IMatch[]) => {\n                this.setState({\n                    matches: matches,\n                });\n            },\n            (reason: string) => {\n                console.log(\"Failed loading list: \" + reason);\n                this.setState({\n                });\n            }\n        );\n    }\n\n    /**\n     * Called when user clicks on the View button of a match in the list\n     * @param match: the selected match object\n     */\n    private onMatchSelected(match: database.IMatch): void {\n        this.setState({\n            displayMatchDetails: true,\n            selectedMatch: match\n        });\n    }\n\n    /**\n     * Will display the match details if a current match is selected\n     */\n    private displayMatchDetails(): React.ReactNode {\n        if (this.state.displayMatchDetails) {\n            return <MatchOverview match={(this.state.selectedMatch as database.IMatch)} web3={this.props.web3}/>\n        } else {\n            return (\n                <Card>\n                    <Card.Body>\n                        <Card.Title>Match details</Card.Title>\n                        <p>Select a match in order to see more details and options!</p>\n                    </Card.Body>\n                </Card>\n            );\n        }\n    }\n\n\n    public render(): React.ReactNode {\n        return (\n            <div>\n                <Row>\n                    <Col md=\"3\">\n                        <Card>\n                            <Card.Header>Matches</Card.Header>\n                            <Card.Body>\n                                {this.state.matches.map((match) => (\n                                    <div>\n                                        <Card>\n                                            <Card.Body>\n                                                <Card.Title>{match.title}</Card.Title>\n                                                <strong>Started on: </strong>{match.start_date}\n                                                <br/>\n                                                <Button onClick={() => (this.onMatchSelected(match))}>View</Button>\n                                            </Card.Body>\n                                        </Card>\n                                        <br/>\n                                    </div>\n                                ))}\n                            </Card.Body>\n                        </Card>\n                    </Col>\n                    <Col md=\"9\">\n                        {this.displayMatchDetails()}\n                    </Col>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default MatchesArea;","import React, {Component} from \"react\";\nimport MainArea from \"./MainArea\";\nimport {Route, Switch} from \"react-router-dom\";\nimport MatchCreateArea from \"./MatchCreateArea\";\nimport MatchesArea from \"./MatchesArea\";\nimport Web3 from \"web3\";\n\ninterface IProps {\n    web3: Web3\n}\n\nclass Routing extends Component<IProps, any> {\n    public render(): any {\n        return (\n            <div className=\"page-content\">\n                <Switch>\n                    <Route exact path=\"/\" render={() => <MainArea web3={this.props.web3} />}/>\n                    <Route path=\"/matches\" render={() => <MatchesArea web3={this.props.web3} />}/>\n                    <Route path=\"/create\" render={() => <MatchCreateArea web3={this.props.web3} />}/>\n                </Switch>\n            </div>\n        );\n    }\n}\n\nexport default Routing;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n        (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n        window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n            response.status === 404 ||\n            (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}